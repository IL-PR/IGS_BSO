Функция СведенияОВнешнейОбработке() Экспорт     
	
	ПараметрыРегистрации = Новый Структура;
	МассивНазначений = Новый Массив;
	МассивНазначений.Добавить("Документ.игсЗаявкаНаОплату"); //Указываем документ к которому делаем внешнюю печ. форму
	ПараметрыРегистрации.Вставить("Вид", "ПечатнаяФорма"); //может быть - ПечатнаяФорма, ЗаполнениеОбъекта, ДополнительныйОтчет, СозданиеСвязанныхОбъектов... 
	ПараметрыРегистрации.Вставить("Назначение", МассивНазначений);
	ПараметрыРегистрации.Вставить("Наименование", "ЗаявкаНаОплату"); //имя под которым обработка будет зарегестрирована в справочнике внешних обработок
	ПараметрыРегистрации.Вставить("БезопасныйРежим", ЛОЖЬ);
	ПараметрыРегистрации.Вставить("Версия", "1.0"); 
	ПараметрыРегистрации.Вставить("Информация", ""); 
	ТаблицаКоманд = ПолучитьТаблицуКоманд();
	ДобавитьКоманду(ТаблицаКоманд, "Заявка на оплату", "ЗаявкаНаОплату", "ВызовСерверногоМетода", Истина, "ПечатьMXL");
	ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Функция ПолучитьТаблицуКоманд()
	Команды = Новый ТаблицаЗначений;
	Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));//как будет выглядеть описание печ.формы для пользователя
	Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка")); //имя макета печ.формы
	Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));
	Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
	Возврат Команды; 
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
	НоваяКоманда = ТаблицаКоманд.Добавить();
	НоваяКоманда.Представление = Представление; 
	НоваяКоманда.Идентификатор = Идентификатор;
	НоваяКоманда.Использование = Использование;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
	НоваяКоманда.Модификатор = Модификатор;
КонецПроцедуры

Функция Печать(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	ФиналТабДокумент = Новый ТабличныйДокумент;
	ФиналТабДокумент.ИмяПараметровПечати = "ЗАЯВКАНАОПЛАТУ"; 
	Для каждого целевойОбъект из МассивОбъектов Цикл
		СсылкаНаОбъект = целевойОбъект;
		ТабДокумент = СоздатьТабличныйДокументЗРДС();
		ФиналТабДокумент.Присоединить(ТабДокумент);
	КонецЦикла;
	УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,"ЗАЯВКАНАОПЛАТУ","ЗАЯВКАНАОПЛАТУ",ФиналТабДокумент);
    Возврат ФиналТабДокумент
КонецФункции  
 

Функция СоздатьТабличныйДокументЗРДС()
	
	ТабДокумент	= Новый ТабличныйДокумент;  
	ТабДокумент.ИмяПараметровПечати = "ЗАЯВКАНАОПЛАТУ";
	ТабДокумент.АвтоМасштаб = Истина;
	Счет62 = ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками;
	Макет		= ПолучитьМакет("ЗРДС");
	Налоги		= Макет.ПолучитьОбласть("Налоги");

	Запрос 		= Новый Запрос;                     
	Запрос.Текст=
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИГС_ЗРДС.Ссылка КАК Ссылка,
	|	ИГС_ЗРДС.Дата КАК Дата,
	|	ИГС_ЗРДС.Номер КАК Номер,
	|	ИГС_ЗРДС.ВидОперации КАК ВидОперации,
	|	ИГС_ЗРДС.Комментарий КАК Комментарий,
	|	ИГС_ЗРДС.Организация КАК Организация,
	|	ИГС_ЗРДС.ЦФО КАК ЦФО,
	|	ИГС_ЗРДС.Инициатор КАК Инициатор,
	|	ИГС_ЗРДС.СуммаПлатежа КАК СуммаКОплате,
	|	ИГС_ЗРДС.СуммаНДС КАК НДС,
	|	ИГС_ЗРДС.НДССверху КАК НДССверху,
	|	ИГС_ЗРДС.СтавкаНДС КАК СтавкаНДС,
	|	ИГС_ЗРДС.ВидОплаты КАК ВидыОплаты,
	|	ИГС_ЗРДС.Контрагент.НаименованиеПолное КАК Контрагент,
	|	ИГС_ЗРДС.ВалютаДокумента КАК ВалютаДокумента,
	|	ИГС_ЗРДС.СчетКонтрагента КАК БанковскийСчетКонтрагента,
	|	ИГС_ЗРДС.НазначениеПлатежа КАК НазначениеИспользования,
	|	ИГС_ЗРДС.Проект КАК ПроектМероприятие,
	|	ИГС_ЗРДС.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ИГС_ЗРДС.ВалютаПлатежа КАК ВалютаПлатежа,
	|	ИГС_ЗРДС.СуммаПлатежа КАК СуммаПлатежа,
	|	ИГС_ЗРДС.СрокОплаты КАК ДатаОплаты,
	|	ИГС_ЗРДС.КПППлательщика КАК КПП,
	|	ИГС_ЗРДС.ИННПлательщика КАК ИНН,
	|	ИГС_ЗРДС.СчетКонтрагента.НомерСчета КАК СчетПолучателя,
	|	ИГС_ЗРДС.СчетКонтрагента.Банк КАК БанкПолучателя,
	|	ИГС_ЗРДС.СчетКонтрагента.Банк.Город КАК Город,
	|	ИГС_ЗРДС.СчетКонтрагента.Банк.КоррСчет КАК КоррСчет,
	|	ИГС_ЗРДС.СчетКонтрагента.Банк.Код КАК БИК,
	|	ИГС_ЗРДС.СуммаДокумента КАК СуммаДокумента,
	|	ИГС_ЗРДС.СчетКонтрагента.БанкДляРасчетов КАК КоррБанк,
	|	ИГС_ЗРДС.СчетКонтрагента.БанкДляРасчетов.КоррСчет КАК БанковскийСчетКонтрагентаБанкДляРасчетовКоррСчет,
	|	ИГС_ЗРДС.СчетКонтрагента.БанкДляРасчетов.Адрес КАК КоррБанкАдрес,
	|	ИГС_ЗРДС.СчетКонтрагента.Банк.Адрес КАК АдресБанка,
	|	ИГС_ЗРДС.КурсНаДатуЗРДС КАК КурсНаДатуЗРДС,
	|	ИГС_ЗРДС.Проект КАК Проект,
	|	ИГС_ЗРДС.Приложение1 КАК Приложение1,
	|	ИГС_ЗРДС.Приложение2 КАК Приложение2,
	|	ИГС_ЗРДС.Приложение3 КАК Приложение3,
	|	ИГС_ЗРДС.ВидЗатрат КАК ВидЗатрат,
	|	ИГС_ЗРДС.СтатусОплатыЗаказчиком КАК СтатусОплатыЗаказчиком,
	|	ИГС_ЗРДС.Контрагент.ЮридическоеФизическоеЛицо КАК ЮрФизЛицо,
	|	ИГС_ЗРДС.СтатьяДвиженияДенежныхСредств КАК СтатьяДДС
	|ИЗ
	|	Документ.игсЗаявкаНаОплату КАК ИГС_ЗРДС
	|ГДЕ
	|	ИГС_ЗРДС.Ссылка В(&СписокСсылок)";

	СписокСсылок = Новый Массив();
	СписокСсылок.Добавить(СсылкаНаОбъект);
	Запрос.УстановитьПараметр("СписокСсылок", СписокСсылок);

	Результат = Запрос.Выполнить();
	ВыборкаПоШапке = Результат.Выбрать();

	ПервыйДокумент 	= Истина;
	ТаблицаОплат 	= Неопределено;
	
	Пока ВыборкаПоШапке.Следующий() Цикл
		
		Если ПервыйДокумент Тогда
			ПервыйДокумент = Ложь;
		Иначе
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли; 
		
		ЭтоПодотчет			 = (Найти("Ц00000680,Ц00000319,Ц00000331,Ц00000341,Ц00000343,Ц00000345,Ц00000275", ВыборкаПоШапке.СтатьяДДС.Код) <> 0);
		Если ВыборкаПоШапке.ЮрФизЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
			ЭтоПодотчет = Ложь;
		КонецЕсли; 
		
		Если ВыборкаПоШапке.ВидЗатрат = Перечисления.игсВидЗатратЗаявкиНаОплату.ОсновноеПроизводство Тогда
			Шапка  = Макет.ПолучитьОбласть("Шапка");
		ИначеЕсли ВыборкаПоШапке.ВидЗатрат = Перечисления.игсВидЗатратЗаявкиНаОплату.CAPEX Тогда
			Шапка  = Макет.ПолучитьОбласть("ШапкаCAPEX");
		ИначеЕсли ЭтоПодотчет Тогда
			Шапка  = Макет.ПолучитьОбласть("ШапкаПодотчет");
		Иначе
			Шапка  		= Макет.ПолучитьОбласть("ШапкаБезПроекта");
		КонецЕсли;
		
		ДетализироватьСтатусОплаты = Ложь;
		Категория 		= "";
		КатегорияЧисло 	= 0;
		ПроектМероприятие = Неопределено;
		Если ВыборкаПоШапке.ВидЗатрат = Перечисления.игсВидЗатратЗаявкиНаОплату.ОсновноеПроизводство Тогда
			
			ТаблицаОплат = ПолучитьТаблицуОплат(СписокСсылок);
			ЧастичнаяОплата = Ложь;
			Для каждого СтрокаОплаты Из ТаблицаОплат Цикл
				Если СтрокаОплаты.ЗРДС = ВыборкаПоШапке.Ссылка Тогда
					Если СтрокаОплаты.КатегорияЧисло = 1 Тогда
						ЧастичнаяОплата = Истина;	
					КонецЕсли; 
					Если СтрокаОплаты.КатегорияЧисло > КатегорияЧисло Тогда
						Категория 		= СтрокаОплаты.Категория;
						КатегорияЧисло  = СтрокаОплаты.КатегорияЧисло;
						Если ПроектМероприятие = Неопределено Тогда
							ПроектМероприятие = СтрокаОплаты.Проект;
						КонецЕсли; 
						
					КонецЕсли; 
				КонецЕсли; 	
			КонецЦикла; 
			Если КатегорияЧисло = 4 Тогда
				Шапка 			= Макет.ПолучитьОбласть("Шапка2|Область1");
				ШапкаОбласть2   = Макет.ПолучитьОбласть("Шапка2|Область2");
				ДетализироватьСтатусОплаты = Истина;
			КонецЕсли; 
			Если КатегорияЧисло = 4
				И ЧастичнаяОплата Тогда
				Категория = "Оплата заказчиком произведена частично";
			КонецЕсли; 
			
			Шапка.Параметры.Категория = Категория;
			
			Если НЕ ЗначениеЗаполнено(Категория) 
				И ЗначениеЗаполнено(ВыборкаПоШапке.СтатусОплатыЗаказчиком) Тогда
				
					Если ВыборкаПоШапке.СтатусОплатыЗаказчиком = Перечисления.игсСтатусыОплатыЗаказчиком.ОплатаЗаказчикомНеПроизведена Тогда
						Шапка 			= Макет.ПолучитьОбласть("Шапка2|Область1");
						ШапкаОбласть2   = Макет.ПолучитьОбласть("Шапка2|Область2");
						ДетализироватьСтатусОплаты = Истина;
					КонецЕсли;
					Шапка.Параметры.Категория = ВыборкаПоШапке.СтатусОплатыЗаказчиком;
					
			КонецЕсли; 
			
			
		КонецЕсли;
		
		Шапка.Параметры.Заполнить(ВыборкаПоШапке);
		
		Попытка
		Если ВыборкаПоШапке.ПроектМероприятие.СубъектыПроекта.Количество() > 0 Тогда
			Шапка.Параметры.ПроектМероприятие = СокрЛП(ВыборкаПоШапке.ПроектМероприятие.СубъектыПроекта[0].Организация.Наименование)+", "+СокрЛП(ВыборкаПоШапке.ПроектМероприятие.Наименование)+", "+СокрЛП(ВыборкаПоШапке.ПроектМероприятие.СубъектыПроекта[0].Договор.Наименование);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ВыборкаПоШапке.ПроектМероприятие) 
			И ЗначениеЗаполнено(ПроектМероприятие)
			И ТипЗнч(ПроектМероприятие) = ТИп("СправочникСсылка.Проекты") Тогда
			Шапка.Параметры.ПроектМероприятие = ПолучитьПроектВерхнегоУровня(ПроектМероприятие);
		ИначеЕсли ТипЗнч(ВыборкаПоШапке.ПроектМероприятие) = ТИп("СправочникСсылка.Проекты") Тогда
			Шапка.Параметры.ПроектМероприятие = ПолучитьПроектВерхнегоУровня(ВыборкаПоШапке.ПроектМероприятие);
		КонецЕсли;
		
		Если ПланыВидовХарактеристик.ИГС_ДополнительныеНастройкиТекущейИБ.УзелРИБ.Значение = Перечисления.ИГС_УзлыРИБ.Авто
			И СокрЛП(Шапка.Параметры.ПроектМероприятие) = "ИГС-Авто" Тогда
			Шапка.Параметры.ПроектМероприятие = ВыборкаПоШапке.ПроектМероприятие;
		КонецЕсли; 
		
		Исключение
		КонецПопытки;
		
		//Вид затрат
		ТекСтатья 	= ВыборкаПоШапке.СтатьяДДС;
		ТекРодитель = ТекСтатья.Родитель;
		Пока НЕ ТекРодитель = Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка() Цикл
			ТекСтатья	= ТекРодитель;
			ТекРодитель	= ТекСтатья.Родитель;
		КонецЦикла;
		
		ФормСтрока = "Л = ru_RU; ДП = Истина";
		
		ПарПредмета = ВыборкаПоШапке.ВалютаПлатежа.ПараметрыПрописи;
		ПрописьЧисла = ЧислоПрописью(ВыборкаПоШапке.СуммаПлатежа, ФормСтрока, ПарПредмета);
		
		Если ДетализироватьСтатусОплаты Тогда
			ШапкаОбласть2.Параметры.СуммаКОплате = Формат(ВыборкаПоШапке.СуммаПлатежа,"ЧДЦ=2") + " " + ВыборкаПоШапке.ВалютаПлатежа.Наименование;
			ШапкаОбласть2.Параметры.СуммаПрописью = "("+ПрописьЧисла+")";
			Если ВыборкаПоШапке.НДС>0 Тогда
				чНДС = УчетНДС.ПолучитьСтавкуНДС(ВыборкаПоШапке.СтавкаНДС);	
				СуммаНДС = ВыборкаПоШапке.НДС;
				ШапкаОбласть2.Параметры.НДС 		= Формат(СуммаНДС,"ЧДЦ=2") + " " + ВыборкаПоШапке.ВалютаПлатежа.Наименование;
			Иначе
				ШапкаОбласть2.Параметры.НДС = "Без НДС";
			КонецЕсли;
			ШапкаОбласть2.Параметры.ПечНДС 		= ВыборкаПоШапке.СтавкаНДС;
			Попытка
				КопияОригинал = "";
				ЗапросКопия = Новый Запрос;
				ЗапросКопия.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
				|	ЕСТЬNULL(ПоступлениеТоваровУслуг.ИГС_ПризнакНаличияОригинала, ПоступлениеДопРасходов.ИГС_ПризнакНаличияОригинала) КАК КопияОригинал,
				|	ВЫБОР
				|		КОГДА ЕСТЬNULL(ПоступлениеТоваровУслуг.ИГС_ПризнакНаличияОригинала, ПоступлениеДопРасходов.ИГС_ПризнакНаличияОригинала) = ЗНАЧЕНИЕ(Перечисление.ИГС_ПризнакНаличияОригиналовДокументов.Копия)
				|			ТОГДА 1
				|		ИНАЧЕ 2
				|	КОНЕЦ КАК Приоритет
				|ИЗ
				|	Документ.ИГС_ЗРДС.ДокументыРасчетов КАК ИГС_ЗРДСДокументыРасчетов
				|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
				|		ПО ИГС_ЗРДСДокументыРасчетов.ДокументРасчетовСКонтрагентом = ПоступлениеТоваровУслуг.Ссылка
				|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеДопРасходов КАК ПоступлениеДопРасходов
				|		ПО ИГС_ЗРДСДокументыРасчетов.ДокументРасчетовСКонтрагентом = ПоступлениеДопРасходов.Ссылка
				|ГДЕ
				|	ИГС_ЗРДСДокументыРасчетов.Ссылка = &Ссылка
				|
				|УПОРЯДОЧИТЬ ПО
				|	Приоритет
				|АВТОУПОРЯДОЧИВАНИЕ";
				ЗапросКопия.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
				РезультатКопия = ЗапросКопия.Выполнить();
				Если Не РезультатКопия.Пустой() Тогда
					ВыборкаКопия = РезультатКопия.Выбрать();
					ВыборкаКопия.Следующий();
					Если ЗначениеЗаполнено(ВыборкаКопия.КопияОригинал) Тогда
						КопияОригинал = ВыборкаКопия.КопияОригинал;
					КонецЕсли;
				КонецЕсли; 
				ШапкаОбласть2.Параметры.КопияОригинал = КопияОригинал;
			Исключение
			КонецПопытки;
		Иначе
			Шапка.Параметры.СуммаКОплате = Формат(ВыборкаПоШапке.СуммаПлатежа,"ЧДЦ=2") + " " + ВыборкаПоШапке.ВалютаПлатежа.Наименование;
			Шапка.Параметры.СуммаПрописью = "("+ПрописьЧисла+")";
			Если ВыборкаПоШапке.НДС>0 Тогда
				чНДС = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(ВыборкаПоШапке.СтавкаНДС);	
				СуммаНДС = ВыборкаПоШапке.НДС;
				Шапка.Параметры.НДС 		= Формат(СуммаНДС,"ЧДЦ=2") + " " + ВыборкаПоШапке.ВалютаПлатежа.Наименование;
			Иначе
				Шапка.Параметры.НДС = "Без НДС";
			КонецЕсли;
			Шапка.Параметры.ПечНДС 		= ВыборкаПоШапке.СтавкаНДС;
		КонецЕсли; 
		
		Шапка.Параметры.ДатаОплаты 	= Формат(ВыборкаПоШапке.ДатаОплаты,"ДФ=dd.MM.yyyy");
		Шапка.Параметры.Дата		= Формат(ВыборкаПоШапке.Дата,"ДФ=dd.MM.yyyy");
		Договор 					= ВыборкаПоШапке.ДоговорКонтрагента;
		Если Не ЭтоПодотчет Тогда
			ИнформацияДоговора		= ?(ЗначениеЗаполнено(Договор),
				?(ЗначениеЗаполнено(Договор.ДоговорПодписан),
						СокрЛП(Договор.Наименование), 
						СокрЛП(Договор.Наименование) + Символы.ПС + " (ДОГОВОР НЕ ПОДПИСАН)"), 
				"ДОГОВОР НЕ УКАЗАН");
						
			Если Договор.игсРамочныйДоговор Тогда
				ИнформацияДоговора = ИнформацияДоговора + Символы.ПС + "(РАМОЧНЫЙ ДОГОВОР)";
			КонецЕсли; 
			
			Если Договор.ДоговорЗакрыт Тогда
				ИнформацияДоговора = ИнформацияДоговора + СИмВОЛЫ.ПС + "(ДОГОВОР ЗАКРЫТ)";
			КонецЕсли; 
			
			Шапка.Параметры.ИнформацияДоговора = ИнформацияДоговора;
		КонецЕсли;
	
		ТабДокумент.Вывести(Шапка);    	
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Организация КАК Организация,
		|	ХозрасчетныйОстатки.Субконто1 КАК Субконто1,
		|	ХозрасчетныйОстатки.СуммаОстатокДт КАК СуммаОстатокДт
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&Период, , &СубконтоКонтрагентДоговор, ) КАК ХозрасчетныйОстатки
		|ГДЕ
		|	ХозрасчетныйОстатки.Счет = &Счет62
		|	И ХозрасчетныйОстатки.Субконто1 = &Контрагент
		|	И ХозрасчетныйОстатки.Субконто2 = &ДоговорКонтрагента";
		Запрос.УстановитьПараметр("Период", 			КонецДня(СсылкаНаОбъект.Дата));
		Запрос.УстановитьПараметр("Контрагент", 		СсылкаНаОбъект.Контрагент);
		СубконтоРегистра = Новый Массив;
		СубконтоРегистра.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
		СубконтоРегистра.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
		Запрос.УстановитьПараметр("СубконтоКонтрагентДоговор", СубконтоРегистра);
		Запрос.УстановитьПараметр("ДоговорКонтрагента", СсылкаНаОбъект.ДоговорКонтрагента); 
		Запрос.УстановитьПараметр("Счет62", Счет62);
		Результат = Запрос.Выполнить();
		ЕстьКЗ = НЕ Результат.Пустой();
		
		Если ЕстьКЗ 
			И СсылкаНаОбъект.ВидОплаты = Перечисления.ИГС_ВидыОплатЗРДС.Предоплата Тогда
			
			ОбластьШапкаКЗ = Макет.ПолучитьОбласть("ШапкаКЗ");
			ТабДокумент.Вывести(ОбластьШапкаКЗ);
			
		КонецЕсли; 
		Если ЕстьКЗ Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст ="ВЫБРАТЬ
			              |	ХозрасчетныйОбороты.Организация КАК Организация,
			              |	ХозрасчетныйОбороты.Субконто1 КАК Субконто1,
			              |	ХозрасчетныйОбороты.СуммаОборотДт КАК СуммаОборотДт
			              |ИЗ
			              |	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода, Регистратор, Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками)), &СубконтоКонтрагентДоговор, , , ) КАК ХозрасчетныйОбороты
			              |ГДЕ
			              |	ХозрасчетныйОбороты.Счет = &Счет62
			              |	И ХозрасчетныйОбороты.Субконто1 = &Контрагент
			              |	И ХозрасчетныйОбороты.Субконто2 = &ДоговорКонтрагента";
			Запрос.УстановитьПараметр("Счет62", Счет62);
			Запрос.УстановитьПараметр("НачалоПериода", 		НачалоДня(СсылкаНаОбъект.Дата) - 3600*24*30);
			Запрос.УстановитьПараметр("КонецПериода",		Новый Граница(КонецДня(СсылкаНаОбъект.Дата), ВидГраницы.Включая));
			Запрос.УстановитьПараметр("Контрагент", 		СсылкаНаОбъект.Контрагент);
			Запрос.УстановитьПараметр("ДоговорКонтрагента", СсылкаНаОбъект.ДоговорКонтрагента);
			Результат = Запрос.Выполнить();
			Если Результат.Пустой() Тогда
				ОбластьШапкаБолее30 = Макет.ПолучитьОбласть("ШапкаЗадолженностьБолее30");
				ТабДокумент.Вывести(ОбластьШапкаБолее30);
			КонецЕсли; 
			
		КонецЕсли; 
		Попытка
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СУММА(РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОстатки.СуммаРегОстаток) КАК Сумма
		|ИЗ
		|	РегистрНакопления.РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Остатки(
		|			&КонецПериода,
		|			Контрагент = &Контрагент
		|				И СчетОплаты = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПокупателями)) КАК РасчетыПоРеализацииВУсловныхЕдиницахОрганизацииОстатки";
		Запрос.УстановитьПараметр("КонецПериода",		Новый Граница(КонецДня(СсылкаНаОбъект.Дата), ВидГраницы.Включая));
		Запрос.УстановитьПараметр("Контрагент", 		СсылкаНаОбъект.Контрагент);
		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда
			
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			
			Если ЗначениеЗаполнено(Выборка.Сумма) Тогда
				
				ОбластьШапкаДЗ 					= Макет.ПолучитьОбласть("ШапкаДЗ");
				ОбластьШапкаДЗ.Параметры.Сумма 	= Формат(-Выборка.Сумма, "ЧЦ=15; ЧДЦ=2");
				ТабДокумент.Вывести(ОбластьШапкаДЗ);
				
			КонецЕсли;
			
		КонецЕсли; 
		Исключение
		КонецПопытки;
		
		Если ДетализироватьСтатусОплаты Тогда
			Если ПланыВидовХарактеристик.ИГС_ДополнительныеНастройкиТекущейИБ.УзелРИБ.Значение = Перечисления.ИГС_УзлыРИБ.ИГС Тогда
				Если КатегорияЧисло = 4 
					ИЛИ КатегорияЧисло = 1 Тогда
					
					ШапкаОплата		= Макет.ПолучитьОбласть("ШапкаОплата");
					
					СтрокаОплата			= Макет.ПолучитьОбласть("СтрокаОплата");
					СтрокаОплатаНеОплачено 	= Макет.ПолучитьОбласть("СтрокаОплатаНеОплачено");
					
					ТабДокумент.Вывести(ШапкаОплата);
					ТаблицаОплат.Свернуть("НоменклатурнаяГруппа, Категория, КатегорияЧисло, Сумма", "");
					Для каждого СтрокаОплаты Из ТаблицаОплат Цикл
						СтрокаОплатаНаПечать = ?(СтрокаОплаты.КатегорияЧисло = 4, СтрокаОплатаНеОплачено, СтрокаОплата);
						СтрокаОплатаНаПечать.Параметры.Заполнить(СтрокаОплаты);
						ТабДокумент.Вывести(СтрокаОплатаНаПечать);
					КонецЦикла; 
				КонецЕсли; 
			КонецЕсли; 
			
			ТабДокумент.Вывести(ШапкаОбласть2);
		КонецЕсли; 
		
		
		Реквизиты          			= Макет.ПолучитьОбласть("Реквизиты");
		Реквизиты.Параметры.Заполнить(ВыборкаПоШапке);

		Реквизиты.Параметры.Контрагент = ?(ЗначениеЗаполнено(ВыборкаПоШапке.БанковскийСчетКонтрагента.ТекстКорреспондента), ВыборкаПоШапке.БанковскийСчетКонтрагента.ТекстКорреспондента,ВыборкаПоШапке.Контрагент);
		
		ТабДокумент.Вывести(Реквизиты);
		
		Если ВыборкаПоШапке.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога Тогда
			
			Запрос 		= Новый Запрос;
			Запрос.Текст=
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ИГС_ЗРДС.СтатусСоставителя КАК Статус,
			|	ИГС_ЗРДС.КодБК КАК КБК,
			|	ИГС_ЗРДС.КодОКАТО КАК ОКАТО,
			|	ИГС_ЗРДС.ПоказательНомера КАК НомерНалДок,
			|	ИГС_ЗРДС.ПоказательДаты КАК ДатаНалДок,
			|	ИГС_ЗРДС.ПоказательОснования КАК ОсновнойНП,
			|	ИГС_ЗРДС.ПоказательТипа КАК ТипНалДок,
			|	ИГС_ЗРДС.ПоказательПериода КАК НалоговыйПериод,
			|	ИГС_ЗРДС.КППОрганизации КАК КППОрганизации
			|ИЗ
			|	Документ.игсЗаявкаНаОплату КАК ИГС_ЗРДС
			|ГДЕ
			|	ИГС_ЗРДС.Ссылка = &Ссылка";
			
			Запрос.УстановитьПараметр("Ссылка", ВыборкаПоШапке.Ссылка);
			
			Результат = Запрос.Выполнить();
			ВыборкаПоНалогам = Результат.Выбрать();
			
			Если  ВыборкаПоНалогам.Следующий() Тогда 
				Налоги.Параметры.Заполнить(ВыборкаПоНалогам);
				Налоги.Параметры.ДатаНалДок = Формат(Налоги.Параметры.ДатаНалДок,"ДФ=dd.MM.yyyy");
			КонецЕсли;
			ТабДокумент.Вывести(Налоги);
			
		КонецЕсли;
		
		ОтветственныйЗаДокумент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект,"Ответственный");
		ПредставлениеФИО = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОтветственныйЗаДокумент,"Представление");
		Отвественность = Макет.ПолучитьОбласть("Отвественность");
		Отвественность.Параметры.ОтветственныйИсполнитель						= ПредставлениеФИО;
		Отвественность.Параметры.ОтветственныйИсполнительТекст 					= "Подтверждаю необходимость оплаты выбранному контрагенту по указанным реквизитам. Документы платежу соответствуют.";	
		Отвественность.Параметры.РуководительПроектаТекст 						= "Подтверждаю необходимость оплаты выбранному контрагенту.";	
		Отвественность.Параметры.ГлавныйБухгалтерТекст 							= "Бухгалтерская и налоговая экспертиза Заявки на оплату и первичной документации проведены. Замечаний нет.";	
		Отвественность.Параметры.ФинансовыйДиректорТекст					= "Согласовываю проведение платежа.";
		Отвественность.Параметры.РуководительПроектаДолжность                   = "Руководитель проекта";
		Отвественность.Параметры.ОтветственныйИсполнительДолжность = "Ответственный исполнитель";
		Отвественность.Параметры.ГлавныйБухгалтерДолжность = "Главный бухгалтер";
		Отвественность.Параметры.ФинансовыйДиректорДолжность = "Финансовый директор";
			
			
		Запрос = Новый Запрос;
		Запрос.Текст=
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ХозрасчетныйОстатки.СуммаОстатокДт КАК СуммаОстатокДт,
		|	ХозрасчетныйОстатки.СуммаОстатокКт КАК СуммаОстатокКт
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаОтчета, , &ВидыСубконто, Организация = &Организация) КАК ХозрасчетныйОстатки
		|ГДЕ
		|	ХозрасчетныйОстатки.Субконто2 = &Контрагент";
		Запрос.УстановитьПараметр("ДатаОтчета",		ТекущаяДатаСеанса());			   
		Запрос.УстановитьПараметр("Организация",	ВыборкаПоШапке.Организация);			   
		Запрос.УстановитьПараметр("Контрагент",		ВыборкаПоШапке.Контрагент);
		
		ВидыСубконто = Новый Массив;
		ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
		ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
		
		Запрос.УстановитьПараметр("ВидыСубконто",ВидыСубконто);			   
		
		Приложения = Макет.ПолучитьОбласть("Приложения");	
		Приложения.Параметры.Приложение1 = ВыборкаПоШапке.Приложение1;	
		Приложения.Параметры.Приложение2 = ВыборкаПоШапке.Приложение2;	
		Приложения.Параметры.Приложение3 = ВыборкаПоШапке.Приложение3;	
		ТабДокумент.Вывести(Приложения);
		ТабДокумент.Вывести(Отвественность);
		
	КонецЦикла;

	ТабДокумент.ОтображатьСетку 	= Ложь;
	ТабДокумент.ОтображатьЗаголовки = Ложь;
	ТабДокумент.ТолькоПросмотр 		= Истина;

	
	Если НЕ СсылкаНаОбъект.СтатьяДвиженияДенежныхСредств.ПринадлежитЭлементу(Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию("Налоги", Истина)) 
		И НЕ СсылкаНаОбъект.СтатьяДвиженияДенежныхСредств.ПринадлежитЭлементу(Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию("Налоги и сборы (с ФОТ)", Истина)) Тогда
		ВывестиДКЗ(ТабДокумент, Макет);			
	КонецЕсли;	
	
	Если СсылкаНаОбъект.СтатьяДвиженияДенежныхСредств.ПринадлежитЭлементу(Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию("Аренда ОС", Истина)) Тогда
		ВывестиОС(ТабДокумент, Макет);
	КонецЕсли;
	
	ВывестиКопииОригиналы(ТабДокумент, Макет);
	
	ВывестиОплатуПоСчету(ТабДокумент, Макет);
	ВывестиВсеАвансыПоДоговору(ТабДокумент, Макет);
	ВывестиРанееПроведенныеОплаты(ТабДокумент, Макет);
	
	Возврат ТабДокумент;

КонецФункции	

Процедура ВывестиВсеАвансыПоДоговору(ТабДокумент, Макет)

	// ИГС ИД Компания, Мостовых Д.В. 06.10.2022 {
	// По заявке Кобзевой Т. 06.10.2022 г.
	Если СсылкаНаОбъект.ВидОплаты = Перечисления.игсВидыОплатЗРДС.Предоплата Тогда
		
		ДоговорКонтрагента  = СсылкаНаОбъект.ДоговорКонтрагента;
		Контрагент			= СсылкаНаОбъект.Контрагент;
		Дата				= СсылкаНаОбъект.Дата;
		
		Шапка 		= Макет.ПолучитьОбласть("ШапкаАвансыПодоговору");
		Строка		= Макет.ПолучитьОбласть("СтрокаАвансыПоДоговору");
		Итоги		= Макет.ПолучитьОбласть("ИтогиАвансыПоДоговору");
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИГС_ЗРДС.Ссылка КАК Ссылка,
		|	ИГС_ЗРДС.НазначениеПлатежа,
		|	ИГС_ЗРДС.СуммаДокумента
		|ИЗ
		|	Документ.игсЗаявкаНаОплату КАК ИГС_ЗРДС
		|ГДЕ
		|	ИГС_ЗРДС.Проведен
		|	И ИГС_ЗРДС.ВидОплаты = ЗНАЧЕНИЕ(Перечисление.игсВидыОплатЗРДС.Предоплата)
		|	И ИГС_ЗРДС.Контрагент = &Контрагент
		|	И ИГС_ЗРДС.ДоговорКонтрагента = &ДоговорКонтрагента
		|	И ИГС_ЗРДС.Дата <= &Дата
		|	И ИГС_ЗРДС.Ссылка <> &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка
		|АВТОУПОРЯДОЧИВАНИЕ";
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
		Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
		Запрос.УстановитьПараметр("Ссылка", 	СсылкаНаОбъект);
		Запрос.УстановитьПараметр("Дата", 		КонецДня(Дата));
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Если Не Результат.Пустой() Тогда
			
			Шапка.Параметры.ДоговорКонтрагента = Строка(ДоговорКонтрагента);
			ТабДокумент.Вывести(Шапка);
			
			СуммаДокумента = 0;
			Пока Выборка.Следующий() Цикл
				
				Строка.Параметры.Заполнить(Выборка);	
				ТабДокумент.Вывести(Строка);
				СуммаДокумента = СуммаДокумента + Выборка.СуммаДокумента;
				
			КонецЦикла;
			
			Итоги.Параметры.СуммаДокумента = СуммаДокумента;
			ТабДокумент.Вывести(Итоги);
			
		КонецЕсли;
		
	КонецЕсли; 

КонецПроцедуры

Процедура ВывестиДКЗ(ТабДокумент, Макет)

	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗачетАванса.Организация КАК Организация,
	|	ЗачетАванса.Счет КАК СчетОплаты,
	|	ЗачетАванса.Субконто1 КАК Контрагент,
	|	ЗачетАванса.Субконто2 КАК ДоговорКонтрагента,
	|	ЗачетАванса.Регистратор КАК Документ,
	|	ВЫБОР
	|		КОГДА ЗачетАванса.СуммаОборотДт > ЗачетАванса.СуммаОборотКт
	|			ТОГДА ЗачетАванса.СуммаОборотДт - ЗачетАванса.СуммаОборотКт
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РегПриход,
	|	ВЫБОР
	|		КОГДА ЗачетАванса.СуммаОборотКт > ЗачетАванса.СуммаОборотДт
	|			ТОГДА ЗачетАванса.СуммаОборотКт - ЗачетАванса.СуммаОборотДт
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РегРасход,
	|	ВЫБОР
	|		КОГДА ЗачетАванса.ВалютнаяСуммаОборотДт >= 0
	|			ТОГДА ВЫБОР
	|					КОГДА ЗачетАванса.ВалютнаяСуммаОборотДт - ЗачетАванса.ВалютнаяСуммаОборотКт < 0
	|						ТОГДА ЗачетАванса.ВалютнаяСуммаОборотДт
	|					ИНАЧЕ ЗачетАванса.ВалютнаяСуммаОборотКт
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ЗачетАванса.ВалютнаяСуммаОборотДт - ЗачетАванса.ВалютнаяСуммаОборотКт > 0
	|					ТОГДА ЗачетАванса.ВалютнаяСуммаОборотДт
	|				ИНАЧЕ ЗачетАванса.ВалютнаяСуммаОборотКт
	|			КОНЕЦ
	|	КОНЕЦ КАК РегПриходВал,
	|	ВЫБОР
	|		КОГДА ЗачетАванса.ВалютнаяСуммаОборотДт >= 0
	|			ТОГДА ВЫБОР
	|					КОГДА ЗачетАванса.ВалютнаяСуммаОборотДт - ЗачетАванса.ВалютнаяСуммаОборотКт < 0
	|						ТОГДА ЗачетАванса.ВалютнаяСуммаОборотДт
	|					ИНАЧЕ ЗачетАванса.ВалютнаяСуммаОборотКт
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ЗачетАванса.ВалютнаяСуммаОборотДт - ЗачетАванса.ВалютнаяСуммаОборотКт > 0
	|					ТОГДА ЗачетАванса.ВалютнаяСуммаОборотДт
	|				ИНАЧЕ ЗачетАванса.ВалютнаяСуммаОборотКт
	|			КОНЕЦ
	|	КОНЕЦ КАК РегРасходВал,
	|	ЗачетАванса.Регистратор КАК Регистратор,
	|	0 КАК РегНачОстатокДт,
	|	0 КАК РегНачОстатокКт,
	|	0 КАК РегКонОстатокДт,
	|	0 КАК РегКонОстатокКт,
	|	0 КАК РегНачОстатокДтВал,
	|	0 КАК РегНачОстатокКтВал,
	|	0 КАК РегКонОстатокДтВал,
	|	0 КАК РегКонОстатокКтВал
	|ПОМЕСТИТЬ ВТ_ЗАчетАванса
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&Начало,
	|			&Конец,
	|			Регистратор,
	|			Счет В ИЕРАРХИИ (&Счета_60_62),
	|			,
	|			Организация = &Организация
	|				И Субконто1 = &Контрагент,
	|			,
	|			) КАК ЗачетАванса
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗачетАванса.Субконто1,
	|	ЗачетАванса.Субконто2,
	|	ЗачетАванса.Организация,
	|	ЗачетАванса.Счет,
	|	ЗачетАванса.Регистратор,
	|	ВЫБОР
	|		КОГДА ЗачетАванса.ВалютнаяСуммаОборотДт >= 0
	|			ТОГДА ВЫБОР
	|					КОГДА ЗачетАванса.ВалютнаяСуммаОборотДт - ЗачетАванса.ВалютнаяСуммаОборотКт < 0
	|						ТОГДА ЗачетАванса.ВалютнаяСуммаОборотДт
	|					ИНАЧЕ ЗачетАванса.ВалютнаяСуммаОборотКт
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ЗачетАванса.ВалютнаяСуммаОборотДт - ЗачетАванса.ВалютнаяСуммаОборотКт > 0
	|					ТОГДА ЗачетАванса.ВалютнаяСуммаОборотДт
	|				ИНАЧЕ ЗачетАванса.ВалютнаяСуммаОборотКт
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЗачетАванса.СуммаОборотДт > ЗачетАванса.СуммаОборотКт
	|			ТОГДА ЗачетАванса.СуммаОборотДт - ЗачетАванса.СуммаОборотКт
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЗачетАванса.СуммаОборотКт > ЗачетАванса.СуммаОборотДт
	|			ТОГДА ЗачетАванса.СуммаОборотКт - ЗачетАванса.СуммаОборотДт
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ЗачетАванса.Регистратор,
	|	ВЫБОР
	|		КОГДА ЗачетАванса.ВалютнаяСуммаОборотДт >= 0
	|			ТОГДА ВЫБОР
	|					КОГДА ЗачетАванса.ВалютнаяСуммаОборотДт - ЗачетАванса.ВалютнаяСуммаОборотКт < 0
	|						ТОГДА ЗачетАванса.ВалютнаяСуммаОборотДт
	|					ИНАЧЕ ЗачетАванса.ВалютнаяСуммаОборотКт
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ЗачетАванса.ВалютнаяСуммаОборотДт - ЗачетАванса.ВалютнаяСуммаОборотКт > 0
	|					ТОГДА ЗачетАванса.ВалютнаяСуммаОборотДт
	|				ИНАЧЕ ЗачетАванса.ВалютнаяСуммаОборотКт
	|			КОНЕЦ
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СчетФактураПолученный.ДокументОснование КАК ДокументОснование,
	|	СчетФактураПолученный.Ссылка КАК Ссылка,
	|	СчетФактураПолученный.Контрагент КАК Контрагент,
	|	СчетФактураПолученный.ДатаВходящегоДокумента КАК ДатаСФ,
	|	СчетФактураПолученный.НомерВходящегоДокумента КАК НомерСФ
	|ПОМЕСТИТЬ ТаблСчФ
	|ИЗ
	|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
	|ГДЕ
	|	СчетФактураПолученный.Проведен
	|	И (СчетФактураПолученный.ДокументОснование ССЫЛКА Документ.ПоступлениеТоваровУслуг
	|			ИЛИ СчетФактураПолученный.ДокументОснование ССЫЛКА Документ.ПоступлениеДопРасходов)
	|
	|СГРУППИРОВАТЬ ПО
	|	СчетФактураПолученный.ДокументОснование,
	|	СчетФактураПолученный.Контрагент,
	|	СчетФактураПолученный.ДатаВходящегоДокумента,
	|	СчетФактураПолученный.НомерВходящегоДокумента,
	|	СчетФактураПолученный.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СчетФактураПолученныйДокументыОснования.ДокументОснование,
	|	СчетФактураПолученныйДокументыОснования.Ссылка,
	|	СчетФактураПолученный.Контрагент,
	|	СчетФактураПолученный.ДатаВходящегоДокумента,
	|	СчетФактураПолученный.НомерВходящегоДокумента
	|ИЗ
	|	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученныйДокументыОснования
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный КАК СчетФактураПолученный
	|		ПО СчетФактураПолученныйДокументыОснования.Ссылка = СчетФактураПолученный.Ссылка
	|			И СчетФактураПолученныйДокументыОснования.ИсходныйДокумент = СчетФактураПолученный.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СчетФактураВыданный.ДокументОснование,
	|	СчетФактураВыданный.Ссылка,
	|	СчетФактураВыданный.Контрагент,
	|	СчетФактураВыданный.Дата,
	|	СчетФактураВыданный.Номер
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ЗАчетАванса.Организация КАК Организация,
	|	ВТ_ЗАчетАванса.СчетОплаты КАК СчетОплаты,
	|	ВТ_ЗАчетАванса.Контрагент КАК Контрагент,
	|	ВТ_ЗАчетАванса.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВТ_ЗАчетАванса.Документ КАК Документ,
	|	СУММА(ВТ_ЗАчетАванса.РегНачОстатокДт) КАК РегНачОстатокДт,
	|	СУММА(ВТ_ЗАчетАванса.РегНачОстатокКт) КАК РегНачОстатокКт,
	|	СУММА(ВТ_ЗАчетАванса.РегПриход) КАК РегПриход,
	|	СУММА(ВТ_ЗАчетАванса.РегРасход) КАК РегРасход,
	|	СУММА(ВТ_ЗАчетАванса.РегКонОстатокДт) КАК РегКонОстатокДт,
	|	СУММА(ВТ_ЗАчетАванса.РегКонОстатокКт) КАК РегКонОстатокКт,
	|	СУММА(ВТ_ЗАчетАванса.РегПриходВал) КАК РегПриходВал,
	|	СУММА(ВТ_ЗАчетАванса.РегРасходВал) КАК РегРасходВал,
	|	СУММА(ВТ_ЗАчетАванса.РегКонОстатокДтВал) КАК РегКонОстатокДтВал,
	|	СУММА(ВТ_ЗАчетАванса.РегКонОстатокКтВал) КАК РегКонОстатокКтВал,
	|	СУММА(ВТ_ЗАчетАванса.РегНачОстатокДтВал) КАК РегНачОстатокДтВал,
	|	СУММА(ВТ_ЗАчетАванса.РегНачОстатокКтВал) КАК РегНачОстатокКтВал,
	|	ВТ_СФ.ДатаСФ КАК ДатаСФ,
	|	ВТ_СФ.НомерСФ КАК НомерСФ,
	|	ДокументПТиУ.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	|	ДокументПТиУ.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента
	|ПОМЕСТИТЬ ВТДанные
	|ИЗ
	|	ВТ_ЗАчетАванса КАК ВТ_ЗАчетАванса
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблСчФ КАК ВТ_СФ
	|		ПО ВТ_ЗАчетАванса.Документ = ВТ_СФ.ДокументОснование
	|			И (ВЫБОР
	|				КОГДА ВТ_ЗАчетАванса.СчетОплаты В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками))
	|					ТОГДА ВТ_СФ.Ссылка ССЫЛКА Документ.СчетФактураПолученный
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|			И ВТ_ЗАчетАванса.Контрагент = ВТ_СФ.Контрагент
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг КАК ДокументПТиУ
	|		ПО ВТ_ЗАчетАванса.Документ = ДокументПТиУ.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ЗАчетАванса.ДоговорКонтрагента,
	|	ВТ_ЗАчетАванса.Документ,
	|	ВТ_ЗАчетАванса.Контрагент,
	|	ВТ_ЗАчетАванса.Организация,
	|	ВТ_СФ.ДатаСФ,
	|	ВТ_СФ.НомерСФ,
	|	ДокументПТиУ.ДатаВходящегоДокумента,
	|	ДокументПТиУ.НомерВходящегоДокумента,
	|	ВТ_ЗАчетАванса.СчетОплаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ЗачетАванса
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблСчФ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДанные.Организация КАК Организация,
	|	ВТДанные.СчетОплаты КАК СчетОплаты,
	|	ВТДанные.Контрагент КАК Контрагент,
	|	ВТДанные.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВТДанные.Документ КАК Документ,
	|	ВТДанные.РегНачОстатокДт КАК РегНачОстатокДт,
	|	ВТДанные.РегНачОстатокКт КАК РегНачОстатокКт,
	|	ВТДанные.РегПриход КАК РегПриход,
	|	ВТДанные.РегРасход КАК РегРасход,
	|	ВТДанные.РегКонОстатокДт КАК РегКонОстатокДт,
	|	ВТДанные.РегКонОстатокКт КАК РегКонОстатокКт,
	|	ВТДанные.РегПриходВал КАК РегПриходВал,
	|	ВТДанные.РегРасходВал КАК РегРасходВал,
	|	ВТДанные.РегКонОстатокДтВал КАК РегКонОстатокДтВал,
	|	ВТДанные.РегКонОстатокКтВал КАК РегКонОстатокКтВал,
	|	ВТДанные.РегНачОстатокДтВал КАК РегНачОстатокДтВал,
	|	ВТДанные.РегНачОстатокКтВал КАК РегНачОстатокКтВал,
	|	ВТДанные.ДатаСФ КАК ДатаСФ,
	|	ВТДанные.НомерСФ КАК НомерСФ,
	|	ВТДанные.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	|	ВТДанные.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента
	|ИЗ
	|	ВТДанные КАК ВТДанные
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетОплаты,
	|	Контрагент,
	|	ДоговорКонтрагента,
	|	Документ
	|ИТОГИ
	|	СУММА(РегНачОстатокДт),
	|	СУММА(РегНачОстатокКт),
	|	СУММА(РегПриход),
	|	СУММА(РегРасход),
	|	СУММА(РегКонОстатокДт),
	|	СУММА(РегКонОстатокКт),
	|	СУММА(РегПриходВал),
	|	СУММА(РегРасходВал),
	|	СУММА(РегКонОстатокДтВал),
	|	СУММА(РегКонОстатокКтВал),
	|	СУММА(РегНачОстатокДтВал),
	|	СУММА(РегНачОстатокКтВал),
	|	МАКСИМУМ(ДатаСФ),
	|	МАКСИМУМ(НомерСФ),
	|	МАКСИМУМ(НомерВходящегоДокумента),
	|	МАКСИМУМ(ДатаВходящегоДокумента)
	|ПО
	|	ОБЩИЕ,
	|	СчетОплаты,
	|	Контрагент,
	|	ДоговорКонтрагента,
	|	Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТДанные";
	
	Запрос.УстановитьПараметр("Начало", НачалоГода(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("Конец", Новый Граница(КонецГода(ТекущаяДатаСеанса()), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация", СсылкаНаОбъект.Организация);
	Счета_60_62 = Новый СписокЗначений;
	Счета_60_62.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками); // 60
	Счета_60_62.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками); // 62
	Счета_60_62.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("76.07.2")); // 76.07.2
	Запрос.УстановитьПараметр("Счет76072", ПланыСчетов.Хозрасчетный.НайтиПоКоду("76.07.2"));
	
	Запрос.УстановитьПараметр("Счета_60_62", Счета_60_62);
	Запрос.УстановитьПараметр("Счет76", ПланыСчетов.Хозрасчетный.НайтиПоКоду("76"));
	Запрос.УстановитьПараметр("Руб", Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("Контрагент", СсылкаНаОбъект.Контрагент);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", СсылкаНаОбъект.ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Счет60", 	ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками);
	Запрос.УстановитьПараметр("Счет6021", 	ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиВал);
	Запрос.УстановитьПараметр("Счет6031", 	ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиУЕ);
	Счета6002_6201 = Новый СписокЗначений();
	Счета6002_6201.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданным);
	Счета6002_6201.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПокупателями);
	Запрос.УстановитьПараметр("Счета6002_6201", Счета6002_6201);
	
	Результат = Запрос.Выполнить();
	ВыборкаИтоги = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаИтоги.Следующий();
	
	ШапкаДКЗ 		= Макет.ПолучитьОбласть("ШапкаДКЗ");
	ГруппировкаДКЗ 	= Макет.ПолучитьОбласть("ГруппировкаДКЗ");
	СтрокаДКЗ		= Макет.ПолучитьОбласть("СтрокаДКЗ");
	СтрокаДКЗВыд	= Макет.ПолучитьОбласть("СтрокаДКЗВыд");
	ИтогоДКЗ		= Макет.ПолучитьОбласть("ИтогоДКЗ");
	
	ТабДокумент.Вывести(ШапкаДКЗ);
	
	ТабДокумент.НачатьАвтогруппировкуСтрок();
	
	МассивРасчетныхДокументов = СсылкаНаОбъект.ДокументыРасчетов.Выгрузить().ВыгрузитьКолонку("ДокументРасчетовСКонтрагентом");
	
	ВыборкаСчет = ВыборкаИтоги.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСчет.Следующий() Цикл
		
		ГруппировкаДКЗ.Параметры.Заполнить(ВыборкаСчет);
		ГруппировкаДКЗ.Параметры.Группировка = ВыборкаСчет.СчетОплаты;
		ТабДокумент.Вывести(ГруппировкаДКЗ, ВыборкаСчет.Уровень());
		
		ВыборкаКонтрагент = ВыборкаСчет.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаКонтрагент.Следующий() Цикл
			
			ГруппировкаДКЗ.Параметры.Заполнить(ВыборкаКонтрагент);
			ГруппировкаДКЗ.Параметры.Группировка = ВыборкаКонтрагент.Контрагент;
			ТабДокумент.Вывести(ГруппировкаДКЗ, ВыборкаКонтрагент.Уровень());
			
			ВыборкаДоговор = ВыборкаКонтрагент.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаДоговор.Следующий() Цикл
				
				ГруппировкаДКЗ.Параметры.Заполнить(ВыборкаДоговор);
				ГруппировкаДКЗ.Параметры.Группировка = ВыборкаДоговор.ДоговорКонтрагента;
				ТабДокумент.Вывести(ГруппировкаДКЗ, ВыборкаДоговор.Уровень());
				
				ВыборкаДокумент = ВыборкаДоговор.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаДокумент.Следующий() Цикл
					Если МассивРасчетныхДокументов.Найти(ВыборкаДокумент.Документ) <> Неопределено Тогда					
						СтрокаДКЗВыд.Параметры.Заполнить(ВыборкаДокумент);	
						ТабДокумент.Вывести(СтрокаДКЗВыд);
					Иначе
						СтрокаДКЗ.Параметры.Заполнить(ВыборкаДокумент);	
						ТабДокумент.Вывести(СтрокаДКЗ);
					КонецЕсли; 
				КонецЦикла; 
			КонецЦикла; 
		КонецЦикла; 
	КонецЦикла; 
	
	ТабДокумент.ЗакончитьАвтогруппировкуСтрок();
	
	ИтогоДКЗ.Параметры.Заполнить(ВыборкаИтоги);	
	ТабДокумент.Вывести(ИтогоДКЗ);

КонецПроцедуры

Процедура ВывестиОплатуПоСчету(ТабДокумент, Макет)
	ДоговорКонтрагента  = СсылкаНаОбъект.ДоговорКонтрагента;
	Контрагент			= СсылкаНаОбъект.Контрагент;
	Дата				= СсылкаНаОбъект.Дата;
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента)
		И (Найти(НРег(ДоговорКонтрагента.Наименование), "счет ") <> 0
			ИЛИ Найти(НРег(ДоговорКонтрагента.Наименование), "счету ") <> 0) Тогда
			
		// Анализируем сумму всех заявок по договорам счет за последний 6 месяцев
		СуммаЗаявок6Месяцев = 0;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИГС_ЗРДС.Ссылка КАК Ссылка,
		|	ИГС_ЗРДС.ДоговорКонтрагента.Наименование КАК Наименование,
		|	ИГС_ЗРДС.СуммаДокумента КАК СуммаДокумента
		|ИЗ
		|	Документ.игсЗаявкаНаОплату КАК ИГС_ЗРДС
		|ГДЕ
		|	ИГС_ЗРДС.Проведен
		|	И ИГС_ЗРДС.Контрагент = &Контрагент
		|	И ИГС_ЗРДС.Дата МЕЖДУ &Дата1 И &Дата2
		|	И ИГС_ЗРДС.Ссылка <> &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка
		|АВТОУПОРЯДОЧИВАНИЕ";
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
		Запрос.УстановитьПараметр("Ссылка", 	СсылкаНаОбъект);
		Запрос.УстановитьПараметр("Дата1", 		Дата(2021, 8, 18));
		Запрос.УстановитьПараметр("Дата2", 		КонецДня(Дата));
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
		
			Если (Найти(НРег(Выборка.Наименование), "счет ") <> 0
					ИЛИ Найти(НРег(Выборка.Наименование), "счету ") <> 0) Тогда
					
				СуммаЗаявок6Месяцев = СуммаЗаявок6Месяцев + Выборка.СуммаДокумента;	
				
			КонецЕсли;
				
		КонецЦикла;
		
		Если СсылкаНаОбъект.СуммаДокумента + СуммаЗаявок6Месяцев > 100000 Тогда
			
			Шапка 		= Макет.ПолучитьОбласть("ШапкаОплатаПоСчету");
			Строка		= Макет.ПолучитьОбласть("СтрокаОплатаПоСчету");
			Итоги		= Макет.ПолучитьОбласть("ИтогиОплатаПоСчету");
			
			ТабДокумент.Вывести(Шапка);
		
			Выборка.Сбросить();
			Пока Выборка.Следующий() Цикл
			
				Если (Найти(НРег(Выборка.Наименование), "счет ") <> 0
						ИЛИ Найти(НРег(Выборка.Наименование), "счету ") <> 0) Тогда
						
					СуммаЗаявок6Месяцев = СуммаЗаявок6Месяцев + Выборка.СуммаДокумента;	
					
					Строка.Параметры.Заполнить(Выборка);	
					ТабДокумент.Вывести(Строка);
					
				КонецЕсли;
					
			КонецЦикла;
			
			Итоги.Параметры.СуммаДокумента = СсылкаНаОбъект.СуммаДокумента + СуммаЗаявок6Месяцев;
			ТабДокумент.Вывести(Итоги);
			
		КонецЕсли; 
		
	КонецЕсли; 

КонецПроцедуры

Функция ПолучитьТаблицуОплат(Знач СписокЗРДС)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИГС_ЗРДСДокументыРасчетов.Ссылка КАК ЗРДС,
	|	ИГС_ЗРДСДокументыРасчетов.ДокументРасчетовСКонтрагентом КАК Ссылка,
	|	ПоступлениеТоваровУслуг.СкладОрдер КАК Склад,
	|	ИГС_ЗРДСДокументыРасчетов.СуммаВзаиморасчетов,
	|	ПоступлениеТоваровУслуг.СуммаДокумента,
	|	ВЫБОР
	|		КОГДА ПоступлениеТоваровУслугУслуги.НомерСтроки ЕСТЬ NULL
	|			ТОГДА ""ТОВАРЫ""
	|		ИНАЧЕ ""УСЛУГИ""
	|	КОНЕЦ КАК Тип,
	|	ВЫБОР
	|		КОГДА ПоступлениеТоваровУслугУслуги.НомерСтроки ЕСТЬ NULL
	|			ТОГДА ""НАКЛАДНЫЕ""
	|		КОГДА ПОДСТРОКА(ПоступлениеТоваровУслугУслуги.СчетЗатрат.Код, 1, 2) = ""20""
	|			ТОГДА ""ПРЯМЫЕ""
	|		ИНАЧЕ ""НАКЛАДНЫЕ""
	|	КОНЕЦ КАК ВидЗатрат,
	|	ПоступлениеТоваровУслуг.СуммаВключаетНДС
	|ПОМЕСТИТЬ ВТДокументыПТиУ
	|ИЗ
	|	Документ.ИГС_ЗРДС.ДокументыРасчетов КАК ИГС_ЗРДСДокументыРасчетов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг.Услуги КАК ПоступлениеТоваровУслугУслуги
	|			ПО ПоступлениеТоваровУслуг.Ссылка = ПоступлениеТоваровУслугУслуги.Ссылка
	|				И (ПоступлениеТоваровУслугУслуги.НомерСтроки = 1)
	|		ПО ИГС_ЗРДСДокументыРасчетов.ДокументРасчетовСКонтрагентом = ПоступлениеТоваровУслуг.Ссылка
	|ГДЕ
	|	ИГС_ЗРДСДокументыРасчетов.Ссылка.Проведен
	|	И ИГС_ЗРДСДокументыРасчетов.Ссылка В(&СписокЗРДС)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ТЧУслуги.Ссылка,
	|	ВЫБОР
	|		КОГДА ТЧУслуги.НоменклатурнаяГруппа <> ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
	|			ТОГДА ТЧУслуги.НоменклатурнаяГруппа
	|		КОГДА НЕ РезультатыРаспределения.НоменклатурнаяГруппа ЕСТЬ NULL
	|			ТОГДА РезультатыРаспределения.НоменклатурнаяГруппа
	|		КОГДА НЕ ЗатратыПоСправкам.ОбъектРаспределения ЕСТЬ NULL
	|				И (ЗатратыПоСправкам.ОбъектРаспределения ССЫЛКА Справочник.НоменклатурныеГруппы
	|					ИЛИ ЗатратыПоСправкам.ОбъектРаспределения ССЫЛКА Справочник.клБуровыеУстановки)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ТЧУслуги.НоменклатурнаяГруппа
	|	КОНЕЦ КАК НоменклатурнаяГруппа,
	|	ВТДокументыПТиУ.ЗРДС,
	|	ВТДокументыПТиУ.Тип,
	|	ВТДокументыПТиУ.ВидЗатрат,
	|	ДатыРаспределения.ДатаНачала,
	|	ДатыРаспределения.ДатаОкончания,
	|	ВЫБОР
	|		КОГДА ВТДокументыПТиУ.СуммаВключаетНДС
	|			ТОГДА ТЧУслуги.Сумма
	|		ИНАЧЕ ТЧУслуги.Сумма + ТЧУслуги.СуммаНДС
	|	КОНЕЦ КАК Сумма
	|ПОМЕСТИТЬ ВТДанные
	|ИЗ
	|	ВТДокументыПТиУ КАК ВТДокументыПТиУ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг.Услуги КАК ТЧУслуги
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.клРезультатРаспределенияПоСправкам КАК РезультатыРаспределения
	|			ПО ТЧУслуги.Ссылка.клСправкаРаспределения = РезультатыРаспределения.СправкаРаспределения
	|				И ТЧУслуги.НомерСтроки = РезультатыРаспределения.Позиция
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.клЗатратыПоСправкамРаспределения.Обороты(, , Регистратор, ) КАК ЗатратыПоСправкам
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.клСправкаРаспределения.Услуги КАК ДатыРаспределения
	|				ПО ЗатратыПоСправкам.СправкаРаспределения = ДатыРаспределения.Ссылка
	|					И ЗатратыПоСправкам.Позиция = ДатыРаспределения.НомерСтроки
	|			ПО ТЧУслуги.Ссылка = ЗатратыПоСправкам.Регистратор
	|				И ТЧУслуги.НомерСтроки = ЗатратыПоСправкам.Позиция
	|				И (ПОДСТРОКА(ЗатратыПоСправкам.СчетЗатрат.Код, 1, 2) = ""20"")
	|		ПО (ТЧУслуги.Ссылка = ВТДокументыПТиУ.Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТДокументыПТиУ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВТДанные.ЗРДС КАК ЗРДС,
	|	ВТДанные.Ссылка КАК ПТиУ,
	|	СправкаОВыполненныхРаботахУслуги.Ссылка КАК СправкаРаспределения,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Оплаты.Регистратор) КАК КоличествоПлатежей,
	|	ВТДанные.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ВТДанные.Тип,
	|	ВТДанные.ВидЗатрат,
	|	ВТДанные.ДатаНачала,
	|	ВТДанные.ДатаОкончания,
	|	СправкаОВыполненныхРаботахУслуги.игс_ДатаНачала КАК ДатаНачалаЗаказчик,
	|	СправкаОВыполненныхРаботахУслуги.игс_ДатаОкончания КАК ДатаОкончанияЗаказчик
	|ПОМЕСТИТЬ ВТПромежуточныеДанные
	|ИЗ
	|	Документ.СправкаОВыполненныхРаботах КАК СправкаОВыполненныхРаботах
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СправкаОВыполненныхРаботах.Услуги КАК СправкаОВыполненныхРаботахУслуги
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанные КАК ВТДанные
	|			ПО СправкаОВыполненныхРаботахУслуги.НоменклатурнаяГруппа = ВТДанные.НоменклатурнаяГруппа
	|				И (ВЫБОР
	|					КОГДА СправкаОВыполненныхРаботахУслуги.НоменклатурнаяГруппа.ИГС_ВидРабот.УказыватьВСправкеВыполненныхРаботПериодПоСуточнымКонтрактам
	|						ТОГДА ВЫБОР
	|								КОГДА СправкаОВыполненныхРаботахУслуги.Ссылка.Дата >= ДАТАВРЕМЯ(2019, 9, 1)
	|										И (СправкаОВыполненныхРаботахУслуги.игс_ДатаНачала = ДАТАВРЕМЯ(1, 1, 1)
	|											ИЛИ СправкаОВыполненныхРаботахУслуги.игс_ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1))
	|									ТОГДА ЛОЖЬ
	|								ИНАЧЕ ИСТИНА
	|							КОНЕЦ
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ)
	|		ПО СправкаОВыполненныхРаботах.Ссылка = СправкаОВыполненныхРаботахУслуги.Ссылка
	|			И (СправкаОВыполненныхРаботах.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидОперацииСправкаОВыполненныхРаботах.ЗавершениеРабот))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Обороты(, , Регистратор, ) КАК Оплаты
	|		ПО (Оплаты.Документ = СправкаОВыполненныхРаботах.Ссылка)
	|			И (Оплаты.СуммаРегПриход > 0)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТДанные.ЗРДС,
	|	ВТДанные.Ссылка,
	|	ВТДанные.НоменклатурнаяГруппа,
	|	СправкаОВыполненныхРаботахУслуги.Ссылка,
	|	ВТДанные.Тип,
	|	ВТДанные.ВидЗатрат,
	|	ВТДанные.ДатаНачала,
	|	ВТДанные.ДатаОкончания,
	|	СправкаОВыполненныхРаботахУслуги.игс_ДатаНачала,
	|	СправкаОВыполненныхРаботахУслуги.игс_ДатаОкончания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДанные.ЗРДС.Контрагент КАК ЗРДСКонтрагент,
	|	ВТДанные.ЗРДС,
	|	ВТДанные.Ссылка КАК ПТИУ,
	|	ВТДанные.Тип КАК Тип,
	|	ВТДанные.ВидЗатрат КАК ВидЗатрат,
	|	ВТДанные.НоменклатурнаяГруппа,
	|	ВТПромежуточныеДанные.СправкаРаспределения,
	|	ВТПромежуточныеДанные.КоличествоПлатежей,
	|	ВЫБОР
	|		КОГДА НЕ ВТПромежуточныеДанные.КоличествоПлатежей ЕСТЬ NULL
	|				И ВТПромежуточныеДанные.КоличествоПлатежей >= 1
	|			ТОГДА ""Оплата заказчиком произведена""
	|		КОГДА ВТДанные.НоменклатурнаяГруппа = НЕОПРЕДЕЛЕНО
	|			ТОГДА ""Не распределено""
	|		КОГДА ВТДанные.НоменклатурнаяГруппа ССЫЛКА Справочник.НоменклатурныеГруппы
	|				И ВТДанные.НоменклатурнаяГруппа <> ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
	|			ТОГДА ""Оплата заказчиком не произведена""
	|		ИНАЧЕ ""Статус оплаты не определен""
	|	КОНЕЦ КАК Категория,
	|	ВЫБОР
	|		КОГДА НЕ ВТПромежуточныеДанные.КоличествоПлатежей ЕСТЬ NULL
	|				И ВТПромежуточныеДанные.КоличествоПлатежей >= 1
	|			ТОГДА 1
	|		КОГДА ВТДанные.НоменклатурнаяГруппа = НЕОПРЕДЕЛЕНО
	|			ТОГДА 2
	|		КОГДА ВТДанные.НоменклатурнаяГруппа ССЫЛКА Справочник.НоменклатурныеГруппы
	|				И ВТДанные.НоменклатурнаяГруппа <> ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
	|			ТОГДА 4
	|		ИНАЧЕ 3
	|	КОНЕЦ КАК КатегорияЧисло,
	|	ВТПромежуточныеДанные.ЗРДС.СуммаДокумента КАК ЗРДССуммаДокумента,
	|	ВТДанные.НоменклатурнаяГруппа.Проект КАК Проект,
	|	ВТДанные.Сумма
	|ИЗ
	|	ВТДанные КАК ВТДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПромежуточныеДанные КАК ВТПромежуточныеДанные
	|		ПО ВТДанные.Ссылка = ВТПромежуточныеДанные.ПТиУ
	|			И ВТДанные.ЗРДС = ВТПромежуточныеДанные.ЗРДС
	|			И ВТДанные.НоменклатурнаяГруппа = ВТПромежуточныеДанные.НоменклатурнаяГруппа
	|			И (ВЫБОР
	|				КОГДА ВТДанные.НоменклатурнаяГруппа.ИГС_ВидРабот.УказыватьВСправкеВыполненныхРаботПериодПоСуточнымКонтрактам = ИСТИНА
	|					ТОГДА ВЫБОР
	|							КОГДА ВТПромежуточныеДанные.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1)
	|									И ВТПромежуточныеДанные.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	|								ТОГДА ИСТИНА
	|							КОГДА ВТПромежуточныеДанные.ДатаОкончания < ДАТАВРЕМЯ(2019, 9, 1)
	|								ТОГДА ИСТИНА
	|							КОГДА ВТПромежуточныеДанные.ДатаНачала <= ВТПромежуточныеДанные.ДатаОкончанияЗаказчик
	|									И ВТПромежуточныеДанные.ДатаОкончания >= ВТПромежуточныеДанные.ДатаНачалаЗаказчик
	|								ТОГДА ИСТИНА
	|							ИНАЧЕ ЛОЖЬ
	|						КОНЕЦ
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТДанные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТПромежуточныеДанные";
	
	Запрос.УстановитьПараметр("СписокЗРДС", СписокЗРДС);
	Результат = Запрос.Выполнить();
	Возврат Результат.Выгрузить();	
	
КонецФункции // ()

Процедура ВывестиОС(ТабДокумент, Макет)

	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ИГС_АрендованныеОСОстаткиИОбороты.Контрагент КАК Контрагент,
	               |	ИГС_АрендованныеОСОстаткиИОбороты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	               |	ИГС_АрендованныеОСОстаткиИОбороты.Склад КАК Склад,
	               |	ИГС_АрендованныеОСОстаткиИОбороты.ОсновноеСредство,
	               |	ИГС_АрендованныеОСОстаткиИОбороты.СуммаНачальныйОстаток КАК СуммаНачальныйОстаток,
	               |	ИГС_АрендованныеОСОстаткиИОбороты.СуммаКонечныйОстаток КАК СуммаКонечныйОстаток,
	               |	ИГС_АрендованныеОСОстаткиИОбороты.СуммаПриход КАК СуммаПриход,
	               |	ИГС_АрендованныеОСОстаткиИОбороты.СуммаРасход КАК СуммаРасход
	               |ИЗ
	               |	РегистрНакопления.ИГС_АрендованныеОС.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, , , ДоговорКонтрагента = &ДоговорКонтрагента) КАК ИГС_АрендованныеОСОстаткиИОбороты
	               |ИТОГИ
	               |	СУММА(СуммаНачальныйОстаток),
	               |	СУММА(СуммаКонечныйОстаток),
	               |	СУММА(СуммаПриход),
	               |	СУММА(СуммаРасход)
	               |ПО
	               |	ОБЩИЕ,
	               |	Контрагент,
	               |	ДоговорКонтрагента,
	               |	Склад";
	
	Запрос.УстановитьПараметр("НачалоПериода", 	НачалоГода(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("КонецПериода", 	КонецГода(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("ДоговорКонтрагента", 	СсылкаНаОбъект.ДоговорКонтрагента);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли; 
	
	ВыборкаИтоги = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаИтоги.Следующий();
	
	ШапкаДКЗ 		= Макет.ПолучитьОбласть("ШапкаОС");
	ГруппировкаДКЗ 	= Макет.ПолучитьОбласть("ГруппировкаОС");
	СтрокаДКЗ		= Макет.ПолучитьОбласть("СтрокаОС");
	ИтогоДКЗ		= Макет.ПолучитьОбласть("ИтогоОС");
	
	ТабДокумент.Вывести(ШапкаДКЗ);
	
	ТабДокумент.НачатьАвтогруппировкуСтрок();
	
	ВыборкаКонтрагент = ВыборкаИтоги.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаКонтрагент.Следующий() Цикл
		
		ГруппировкаДКЗ.Параметры.Заполнить(ВыборкаКонтрагент);
		ГруппировкаДКЗ.Параметры.Группировка = ВыборкаКонтрагент.Контрагент;
		ТабДокумент.Вывести(ГруппировкаДКЗ, ВыборкаКонтрагент.Уровень());
		
		ВыборкаДоговор = ВыборкаКонтрагент.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаДоговор.Следующий() Цикл
			
			ГруппировкаДКЗ.Параметры.Заполнить(ВыборкаДоговор);
			ГруппировкаДКЗ.Параметры.Группировка = ВыборкаДоговор.ДоговорКонтрагента;
			ТабДокумент.Вывести(ГруппировкаДКЗ, ВыборкаДоговор.Уровень());
			
			ВыборкаСклад = ВыборкаДоговор.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаСклад.Следующий() Цикл
				
				ГруппировкаДКЗ.Параметры.Заполнить(ВыборкаСклад);
				ГруппировкаДКЗ.Параметры.Группировка = ВыборкаСклад.Склад;
				ТабДокумент.Вывести(ГруппировкаДКЗ, ВыборкаСклад.Уровень());
				
				Выборка = ВыборкаСклад.Выбрать();
				Пока Выборка.Следующий() Цикл
					
					СтрокаДКЗ.Параметры.Заполнить(Выборка);
					СтрокаДКЗ.Параметры.Группировка = Выборка.ОсновноеСредство;
					ТабДокумент.Вывести(СтрокаДКЗ, Выборка.Уровень());
					
				КонецЦикла;
			КонецЦикла;
			
		КонецЦикла; 
		
	КонецЦикла; 
	
	ТабДокумент.ЗакончитьАвтогруппировкуСтрок();
	
	ИтогоДКЗ.Параметры.Заполнить(ВыборкаИтоги);	
	
	ТабДокумент.Вывести(ИтогоДКЗ);

КонецПроцедуры

Процедура ВывестиКопииОригиналы(ТабДокумент, Макет)

	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПоступлениеТоваровУслуг.Ссылка КАК Ссылка,
	               |	ПоступлениеТоваровУслуг.Дата КАК Дата,
	               |	ПоступлениеТоваровУслуг.Номер КАК Номер,
	               |	ПоступлениеТоваровУслуг.ВидОперации КАК ВидОперации,
	               |	ПоступлениеТоваровУслуг.СуммаДокумента КАК СуммаДокумента,
	               |	ПоступлениеТоваровУслуг.Контрагент КАК Контрагент,
	               |	ПоступлениеТоваровУслуг.Склад КАК Склад,
	               |	ПоступлениеТоваровУслуг.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	               |	ПоступлениеТоваровУслуг.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	               |	ПоступлениеТоваровУслуг.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
	               |	""УСЛУГИ"" КАК ТипПоступления
	               |ПОМЕСТИТЬ ВТДанные
	               |ИЗ
	               |	Документ.ПоступлениеТоваровУслуг.Услуги КАК ПоступлениеТоваровУслугУслуги
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОперацияБух КАК ОперацияБух
	               |			ПО ПоступлениеТоваровУслуг.Ссылка = ОперацияБух.СторнируемыйДокумент
	               |		ПО ПоступлениеТоваровУслугУслуги.Ссылка = ПоступлениеТоваровУслуг.Ссылка
	               |ГДЕ
	               |	ПоступлениеТоваровУслуг.Проведен
	               |	И ПоступлениеТоваровУслуг.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	               |	И НЕ ОперацияБух.ПометкаУдаления
	               |	И ПоступлениеТоваровУслуг.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Услуги)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ПоступлениеТоваровУслуг.Ссылка,
	               |	ПоступлениеТоваровУслуг.Дата,
	               |	ПоступлениеТоваровУслуг.Номер,
	               |	ПоступлениеТоваровУслуг.ВидОперации,
	               |	ПоступлениеТоваровУслуг.СуммаДокумента,
	               |	ПоступлениеТоваровУслуг.Контрагент,
	               |	ПоступлениеТоваровУслуг.Склад,
	               |	ПоступлениеТоваровУслуг.ПодразделениеОрганизации,
	               |	ПоступлениеТоваровУслуг.НомерВходящегоДокумента,
	               |	ПоступлениеТоваровУслуг.ДатаВходящегоДокумента,
	               |	""ТМЦ""
	               |ИЗ
	               |	Документ.ПоступлениеТоваровУслуг.Услуги КАК ПоступлениеТоваровУслугУслуги
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	               |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
	               |			ПО ПоступлениеТоваровУслуг.Склад = Склады.Ссылка
	               |				И ПоступлениеТоваровУслуг.Склад = Склады.Ссылка
	               |		ПО ПоступлениеТоваровУслугУслуги.Ссылка = ПоступлениеТоваровУслуг.Ссылка,
	               |	Документ.ОперацияБух КАК ОперацияБух
	               |ГДЕ
	               |	ПоступлениеТоваровУслуг.Проведен
	               |	И НЕ ОперацияБух.ПометкаУдаления
	               |	И ОперацияБух.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	               |	И ПоступлениеТоваровУслуг.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ОСновныеСредства)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТДанные.Ссылка КАК Ссылка,
	               |	ВТДанные.Дата КАК Дата,
	               |	ВТДанные.Номер КАК Номер,
	               |	ВТДанные.ВидОперации КАК ВидОперации,
	               |	ВТДанные.СуммаДокумента КАК СуммаДокумента,
	               |	ВТДанные.Контрагент КАК Контрагент,
	               |	ВТДанные.Склад КАК Склад,
	               |	ВТДанные.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	               |	ВТДанные.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	               |	ВТДанные.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
	               |	ВТДанные.ТипПоступления КАК ТипПоступления
	               |ИЗ
	               |	ВТДанные КАК ВТДанные
	               |ГДЕ
	               |	ВЫБОР
	               |			КОГДА &ТипПоступления = ""Услуги""
	               |				ТОГДА ВТДанные.ТипПоступления = ""Услуги""
	               |			КОГДА &ТипПоступления = ""ТМЦ""
	               |				ТОГДА ВТДанные.ТипПоступления = ""ТМЦ""
	               |			ИНАЧЕ ИСТИНА
	               |		КОНЕЦ
	               |	И ВТДанные.Контрагент = &Контрагент
	               |	И ВТДанные.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку)
	               |ИТОГИ
	               |	СУММА(СуммаДокумента)
	               |ПО
	               |	ТипПоступления
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТДанные";
	Запрос.УстановитьПараметр("НачалоПериода", 	Дата(2017, 1, 1));
	Запрос.УстановитьПараметр("КонецПериода", 	Дата(2999, 1, 1));
	Запрос.УстановитьПараметр("ТипПоступления", "Все");
	Запрос.УстановитьПараметр("Контрагент", 	СсылкаНаОбъект.Контрагент);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли; 
	
	ВыборкаИтоги = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаИтоги.Следующий();
	
	ШапкаДКЗ 		= Макет.ПолучитьОбласть("ШапкаКопияОригинал");
	ГруппировкаДКЗ 	= Макет.ПолучитьОбласть("ГруппировкаКопияОригинал");
	СтрокаДКЗ		= Макет.ПолучитьОбласть("СтрокаКопияОригинал");
	ИтогоДКЗ		= Макет.ПолучитьОбласть("ИтогоКопияОригинал");
	
	ТабДокумент.Вывести(ШапкаДКЗ);
	
	ТабДокумент.НачатьАвтогруппировкуСтрок();
	
	ВыборкаТип = ВыборкаИтоги.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаТип.Следующий() Цикл
		
		ГруппировкаДКЗ.Параметры.Заполнить(ВыборкаТип);
		ГруппировкаДКЗ.Параметры.Группировка = ВыборкаТип.ТипПоступления;
		ТабДокумент.Вывести(ГруппировкаДКЗ, ВыборкаТип.Уровень());
		
		Выборка = ВыборкаТип.Выбрать();
		Пока Выборка.Следующий() Цикл
			СтрокаДКЗ.Параметры.Заполнить(Выборка);	
			ТабДокумент.Вывести(СтрокаДКЗ);
		КонецЦикла; 
	КонецЦикла; 
	
	ТабДокумент.ЗакончитьАвтогруппировкуСтрок();
	
	ИтогоДКЗ.Параметры.Заполнить(ВыборкаИтоги);	
	
	ТабДокумент.Вывести(ИтогоДКЗ);

КонецПроцедуры
 
Процедура ВывестиРанееПроведенныеОплаты(ТабДокумент, Макет)

	Если ЗначениеЗаполнено(СсылкаНаОбъект.ДоговорКонтрагента.Сумма) Тогда
		
		Шапка 		= Макет.ПолучитьОбласть("ШапкаОплаты");
		Строка		= Макет.ПолучитьОбласть("СтрокаОплаты");
		Итоги		= Макет.ПолучитьОбласть("ИтогиОплаты");
		Шапка.Параметры.СуммаДоговора	   = Формат(СсылкаНаОбъект.ДоговорКонтрагента.ИГС_СуммаДоговора, "ЧЦ=15; ЧДЦ=2");
		
		Запрос = Новый Запрос;
		СубконтоКонтрагентДоговор = Новый СписокЗначений;
		СубконтоКонтрагентДоговор.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
		СубконтоКонтрагентДоговор.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
		Запрос.УстановитьПараметр("Контрагент",	 				СсылкаНаОбъект.Контрагент);
		Запрос.УстановитьПараметр("ДоговорКонтрагента", 		СсылкаНаОбъект.ДоговорКонтрагента);
		Запрос.УстановитьПараметр("СубконтоКонтрагентДоговор", 	СубконтоКонтрагентДоговор);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ГОД(ИГС_ЗРДС.Дата) КАК Поле1,
		|	ИГС_ЗРДС.СуммаДокумента КАК СуммаДокумента,
		|	ИГС_ЗРДС.Ссылка КАК Ссылка,
		|	NULL КАК Поле2,
		|	NULL КАК СуммаОборот,
		|	NULL КАК Регистратор,
		|	ИГС_ЗРДС.НазначениеПлатежа КАК НазначениеПлатежа
		|ИЗ
		|	РегистрСведений.игсКазнаРегистрСостояний.СрезПоследних КАК игсКазнаРегистрСостоянийСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.игсЗаявкаНаОплату КАК ИГС_ЗРДС
		|		ПО игсКазнаРегистрСостоянийСрезПоследних.Заявка = ИГС_ЗРДС.Ссылка
		|ГДЕ
		|	ИГС_ЗРДС.Проведен
		|	И ЕСТЬNULL(игсКазнаРегистрСостоянийСрезПоследних.СостояниеЗаявки, ЗНАЧЕНИЕ(Перечисление.игсСостоянияСогласования.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Перечисление.игсСостоянияСогласования.Отклонена)
		|	И ИГС_ЗРДС.ДоговорКонтрагента = &ДогворКонтрагента
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	NULL,
		|	NULL,
		|	NULL,
		|	ГОД(ХозрасчетныйОбороты.Период),
		|	ХозрасчетныйОбороты.СуммаОборот,
		|	ХозрасчетныйОбороты.Регистратор,
		|	ПлатежноеПоручение.НазначениеПлатежа
		|ИЗ
		|	Документ.ПлатежноеПоручение КАК ПлатежноеПоручение,
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(, , Регистратор, Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками), ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами)), &СубконтоКонтрагентДоговор, Субконто2 = &ДоговорКонтрагента, КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетныеСчета), ) КАК ХозрасчетныйОбороты";
		
		ВыведенаШапка = Ложь;
		Результат = Запрос.Выполнить();
		ВыборкаИтоги = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаИтоги.Следующий() Цикл
			
			Итоги.Параметры.Сумма 			= ВыборкаИтоги.Сумма;
			Шапка.Параметры.СуммаОстаток 	= Формат(СсылкаНаОбъект.ДоговорКонтрагента.Сумма - ВыборкаИтоги.Сумма, "ЧЦ=15; ЧДЦ=2");
			ТабДокумент.Вывести(Шапка);
			ВыведенаШапка 					= Истина;
			
			Выборка = ВыборкаИтоги.Выбрать();
			Пока Выборка.Следующий() Цикл
				Строка.Параметры.Заполнить(Выборка);
				ТабДокумент.Вывести(Строка);
			КонецЦикла;
			
		КонецЦикла;
		
		Если Не ВыведенаШапка Тогда
			ТабДокумент.Вывести(Шапка);
		Иначе
			ТабДокумент.Вывести(Итоги);
		КонецЕсли;
		
	КонецЕсли; 

КонецПроцедуры
 
Функция ПолучитьПроектВерхнегоУровня(Знач НаименованиеПроекта)
	
	Если ТипЗнч(НаименованиеПроекта) = ТИп("СправочникСсылка.Проекты") Тогда
		Если НЕ ЗначениеЗаполнено(НаименованиеПроекта) 
				ИЛИ НаименованиеПроекта.Уровень() = 0 Тогда
			Возврат НаименованиеПроекта;
		Иначе
			Если Строка(НаименованиеПроекта.Родитель) = "ПРОЕКТЫ" Тогда
				Возврат НаименованиеПроекта;
			Иначе
				Возврат ПолучитьПроектВерхнегоУровня(НаименованиеПроекта.Родитель);
			КонецЕсли;
		КонецЕсли; 
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Проекты.Ссылка
	|ИЗ
	|	Справочник.Проекты КАК Проекты
	|ГДЕ
	|	Проекты.ЭтоГруппа
	|	И Проекты.Наименование ПОДОБНО &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", "%" + НаименованиеПроекта + "%");
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Ссылка;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции