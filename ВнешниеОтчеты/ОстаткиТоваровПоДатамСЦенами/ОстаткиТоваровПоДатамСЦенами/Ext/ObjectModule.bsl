
////////////////////// сведения и настройки внешней обработки /////////////////

Функция СведенияОВнешнейОбработке() Экспорт
	
	РегистрационныеДанные = Новый Структура;
	РегистрационныеДанные.Вставить("Наименование", "Остатки товаров (ИГС)");
	РегистрационныеДанные.Вставить("БезопасныйРежим", Истина);
	РегистрационныеДанные.Вставить("Версия", "1.7");
	РегистрационныеДанные.Вставить("Вид", "ДополнительныйОтчет");
	РегистрационныеДанные.Вставить("Информация", "");
	РегистрационныеДанные.Вставить("ОпределитьНастройкиФормы", Истина);	// {{ ИГС Барковская А.П, 23.03.2023 }}
	
	///////////// команды /////////////////////////
	тзКоманд = Новый ТаблицаЗначений;
	тзКоманд.Колонки.Добавить("Идентификатор");
	тзКоманд.Колонки.Добавить("Представление");
	тзКоманд.Колонки.Добавить("Модификатор");
	тзКоманд.Колонки.Добавить("ПоказыватьОповещение");
	тзКоманд.Колонки.Добавить("Использование");
	
	строкаКоманды = тзКоманд.Добавить();
	строкаКоманды.Идентификатор = "СА_ОстаткиТоваров";
	строкаКоманды.Представление = "Остатки товаров (ГК ИГС)";
	строкаКоманды.ПоказыватьОповещение = Истина;
	строкаКоманды.Использование = "ОткрытиеФормы";
	РегистрационныеДанные.Вставить("Команды", тзКоманд);
	
	Возврат РегистрационныеДанные;
	
КонецФункции

// {{ ИГС Барковская А.П, 23.03.2023 
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	Настройки.События.ПриОпределенииПараметровВыбора = Истина;
КонецПроцедуры

Процедура ПриОпределенииПараметровВыбора(Форма, СвойстваНастройки) Экспорт
	
	Если СвойстваНастройки.ОписаниеТипов.СодержитТип(Тип("ПланСчетовСсылка.Хозрасчетный")) Тогда
		СвойстваНастройки.ОграничиватьВыборУказаннымиЗначениями = Истина;
		МассивСчетов = ПолучитьСписокСчетовУчета();
		СвойстваНастройки.ЗначенияДляВыбора.ЗагрузитьЗначения(МассивСчетов);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСписокСчетовУчета()
	
	УстановитьПривилегированныйРежим(Истина);
	
	//счета свободных остатков + забалансовые + 01.01
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СА_СвободныеОстатки.СчетУчета КАК СчетУчета
	|ПОМЕСТИТЬ ВТ_Счета
	|ИЗ
	|	РегистрНакопления.СА_СвободныеОстатки КАК СА_СвободныеОстатки
	|ГДЕ
	|	СА_СвободныеОстатки.СчетУчета <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИГС_ЗабалансовыеМТР.СчетУчета
	|ИЗ
	|	РегистрНакопления.ИГС_ЗабалансовыеМТР КАК ИГС_ЗабалансовыеМТР
	|ГДЕ
	|	ИГС_ЗабалансовыеМТР.СчетУчета <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИГС_ОстаткиОсновныеСредстваЗабаланс.СчетУчета
	|ИЗ
	|	РегистрНакопления.ИГС_ОстаткиОсновныеСредстваЗабаланс КАК ИГС_ОстаткиОсновныеСредстваЗабаланс
	|ГДЕ
	|	ИГС_ОстаткиОсновныеСредстваЗабаланс.СчетУчета <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОСвОрганизации)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_Счета.СчетУчета КАК СчетУчета
	|ИЗ
	|	ВТ_Счета КАК ВТ_Счета
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_Счета.СчетУчета.Код";
	МассивСчетов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СчетУчета");
	Возврат МассивСчетов;
	
КонецФункции
// }} ИГС Барковская А.П, 23.03.2023 

/////////////////// формирование и вывод отчета ///////////////////////

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ложь;
	
	СхемаКомпоновкиДанных = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	
	//Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;  
	// - Если сделать так, как показано выше(рекомендуют на некоторых ресурсах), то при изменении настроек в режиме клиента
	// этих изменений Вы не увидите, потому что настройки всегда будут по умолчанию. Как правильно - вариант ниже
	Настройки = КомпоновщикНастроек.ПолучитьНастройки(); 
	
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных; 
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);	
	
	Период = Настройки.ПараметрыДанных.Элементы.Найти("Период").Значение;
	ПериодОборачиваемости = Настройки.ПараметрыДанных.Элементы.Найти("ПериодОборачиваемости").Значение; //ИГС Барковская А.П, 26.09.2022 
	
	// {{ ИГС Барковская А.П, 23.03.2023
	ТЗСвободныеОстаткиСЦФО = ПолучитьТЗСвободныеОстаткиСЦФО(Период, ПериодОборачиваемости); //ИГС Барковская А.П, 26.09.2022 - Добавлен ПериодОборачиваемости
	ТЗОСтаткиЗабалансИОС = ПолучитьТЗОстаткиЗабалансИОС(Период);
	
	ЗаполнитьОбщийОстатокПоНоменклатуре(ТЗСвободныеОстаткиСЦФО, ТЗОСтаткиЗабалансИОС);
	
	ВнешнийНаборДанных = Новый Структура;
	ВнешнийНаборДанных.Вставить("ВТ_ОстаткиПоДатам", ТЗСвободныеОстаткиСЦФО);
	ВнешнийНаборДанных.Вставить("ВТ_ОстаткиОСИЗабаланс", ТЗОСтаткиЗабалансИОС); 
	// }} ИГС Барковская А.П, 23.03.2023
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных; 
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешнийНаборДанных, ДанныеРасшифровки); 
	
	ДокументРезультат.Очистить();
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент; 
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат); 
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
КонецПроцедуры

Процедура ПеренестиОтборы(КомпоновщикИсточник, КомпоновщикПриемник)
	
	Для Каждого ЭлОтбора Из КомпоновщикИсточник.Отбор.Элементы Цикл
		
		Если Не ЭлОтбора.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		НовОтбор = КомпоновщикПриемник.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЗаполнитьЗначенияСвойств(НовОтбор, ЭлОтбора);
		
	КонецЦикла;
	
КонецПроцедуры


Функция ПолучитьТЗСвободныеОстаткиСЦФО(Период, ПериодОборачиваемости)
	
	//УстановитьПривилегированныйРежим(Истина);
	МояСхема = ПолучитьМакет("ВременнаяСхемаКомпоновки");
	
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	МояСхема.Параметры.ДатаАктуальности.Значение = Новый Граница(КонецДня(Период), ВидГраницы.Включая);
	МояСхема.Параметры.Дата.Значение = КонецДня(Период); // Шалаева
	
	//ИГС Барковская А.П, 26.09.2022 {
	МояСхема.Параметры.ПериодОборачиваемости.Значение = ?(ЗначениеЗаполнено(ПериодОборачиваемости), НачалоДня(ПериодОборачиваемости), КонецДня(Период));																									   
	МояСхема.Параметры.ДнейПериодОборачиваемости.Значение = ?(ЗначениеЗаполнено(ПериодОборачиваемости),(КонецДня(Период) - КонецДня(ПериодОборачиваемости)) / (60 * 60 * 24), 0);
	МояСхема.Параметры.НачалоТекущейДаты.Значение = НачалоДня(ТекущаяДата())-1;
	// } ИГС Барковская А.П, 26.09.2022
	
	МоиНастройки = МояСхема.НастройкиПоУмолчанию;
	ПеренестиОтборы(Настройки, МоиНастройки);
	
	ТЗ = Новый ТаблицаЗначений;
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных; 
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МойМакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(МояСхема, МоиНастройки, ДанныеРасшифровки, , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МойМакетКомпоновкиДанных,, ДанныеРасшифровки, Истина);
	ПроцессорВыводаВКоллекцию = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВыводаВКоллекцию.УстановитьОбъект(ТЗ);
	ПроцессорВыводаВКоллекцию.Вывести(ПроцессорКомпоновкиДанных,Истина);
	
	ВремТабЦена = ТЗ.Скопировать();
	ВремТабЦена.Свернуть("Организация, Склад, Номенклатура, Код, Счет, Сумма, ПолученоИзУСО", "ВНаличии");
	ВремТабЦена.Колонки.Добавить("НомерСтроки");
	ВремТабЦена.Колонки.Добавить("КоличествоВУСО");
	
	УстановитьПривилегированныйРежим(Истина);
	
	Сч = 1;
	Для Каждого Строк Из ВремТабЦена Цикл
		Строк.НомерСтроки = Сч;
		Сч = Сч + 1;
	КонецЦикла;
	
	ВремВремТаб = ВремТабЦена.Скопировать();
	ТабНоменклатуры = ВремТабЦена.Скопировать();
	ТабНоменклатуры.Свернуть("Организация, Склад, Номенклатура");
	
	//ВЕРНУТЬ{
	ВремТабОрганизации = ВремТабЦена.Скопировать();
	ВремТабОрганизации.Свернуть("Организация");
	
	Для Каждого СтрокОрганизация ИЗ ВремТабОрганизации Цикл
		
		СтрокиОрганизации = ВремТабЦена.НайтиСтроки(Новый Структура("Организация",СтрокОрганизация.Организация));
		ВремВремТаб.Очистить();
		
		Для Каждого СтрокОрг Из СтрокиОрганизации Цикл
			НовСтрок = ВремВремТаб.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрок, СтрокОрг);
		КонецЦикла;
		
		са_ОбщегоНазначенияСервер.игс_ПолучитьОстаткиИзУСОБП(ВремВремТаб, КонецДня(Период),СтрокОрганизация.Организация);
		
		Для Каждого Строк Из ВремВремТаб Цикл
			
			Если Не ЗначениеЗаполнено(Строк.КоличествоВУСО) Тогда
				Строк.КоличествоВУСО = 0;
			КонецЕсли;
			
			СтрокТаб = ВремТабЦена.Найти(Строк.НомерСтроки,"НомерСтроки");
			СтрокТаб.ПолученоИзУСО = Строк.ПолученоИзУСО;
			
			Если СтрокТаб.ВНаличии = Строк.КоличествоВУСО Тогда
				СтрокТаб.Сумма = Строк.Сумма;			
			Иначе				
				СтрокТаб.Сумма = СтрокТаб.ВНаличии * ?(Строк.КоличествоВУСО = 0, 0, Строк.Сумма / Строк.КоличествоВУСО);
			КонецЕсли; 
			
		КонецЦикла;
	КонецЦикла;
	// } ВЕРНУТЬ
	
	ТЗРезультат = ТЗ.Скопировать();
	
	Для Каждого Строк Из ВремТабЦена Цикл
		
		СуммаКРаспределению = Строк.Сумма;
		ПолученноИЗУСО = Строк.ПолученоИзУСО;
		
		Если ПолученноИЗУСО ТОгда
			
			Отбор = НОвый Структура("Организация, Склад, Номенклатура, Счет", Строк.Организация, Строк.Склад, Строк.Номенклатура, Строк.Счет);
			СтрокиТЗ = ТЗ.НайтиСтроки(Отбор);
			КоличествоВСего = 0;
			
			Для Каждого СтрокаТЗ Из СтрокиТЗ Цикл
				
				КоличествоВСего=КоличествоВСего+СтрокаТЗ.ВНаличии;
				СтрокаТЗ.ПолученоИзУСО = ПолученноИЗУСО;
				
			КонецЦикла;
			
			ЦенаЗаЕд = ОКР(СуммаКРаспределению/?(КоличествоВСего=0,1,КоличествоВСего),2);
			КоличествоОсталосьКРаспределению = КоличествоВСего;
			
			Для Каждого СтрокаТЗ Из СтрокиТЗ Цикл
				
				КоличествоКТекРаспределению = Мин(СтрокаТЗ.ВНаличии,КоличествоОсталосьКРаспределению);
				
				Если КоличествоКТекРаспределению = КоличествоОсталосьКРаспределению ТОгда
					СтрокаТЗ.Сумма = СуммаКРаспределению;
				Иначе
					СтрокаТЗ.Сумма = ОКР(КоличествоКТекРаспределению*ЦенаЗаЕд,2)
				КонецЕсли;
				
				КоличествоОсталосьКРаспределению = КоличествоОсталосьКРаспределению-КоличествоКТекРаспределению;
				СуммаКРаспределению = СуммаКРаспределению-СтрокаТЗ.Сумма;
				
				Если СуммаКРаспределению = 0 ТОгда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	ТЗРезультат.Очистить();
	ТЗРезультат.Колонки.Добавить("ПлановаяСтоимость");
	ТЗРезультат.Колонки.Добавить("СуммаРезерва");	
	
	//ИГС Барковская А.П, 26.09.2022 {
	
	Для Каждого СтрокНоменклатура Из ТабНоменклатуры Цикл			
		
		Отбор = Новый Структура("Организация, Склад, Номенклатура", СтрокНоменклатура.Организация, СтрокНоменклатура.Склад, СтрокНоменклатура.Номенклатура);
		ТЗСтроки = ТЗ.НайтиСтроки(Отбор);
		
		Для Каждого ТЗСтрока Из ТЗСтроки Цикл
			
			СуммаРаспределить = ТЗСтрока.Сумма;
			
			ПолученоИзУСО = ТЗСтрока.ПолученоИзУСО;		
			КоличествоРаспределить = ТЗСтрока.ВНаличии;
			ТекЦена = Окр(СуммаРаспределить/?(КоличествоРаспределить=0,1,КоличествоРаспределить),2);
			
			СтрокаРезультат = ТЗРезультат.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРезультат, ТЗСтрока);			
			
			СтрокаРезультат.ВНаличии = КоличествоРаспределить;
			СтрокаРезультат.Доступно = СтрокаРезультат.ВНаличии - СтрокаРезультат.ВРезерве;
			СтрокаРезультат.ПолученоИзУСО = ПолученоИзУСО;	
			СтрокаРезультат.ПлановаяСтоимость = СуммаРаспределить;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// } ИГС Барковская А.П, 26.09.2022
	
	
	// рассчитаем сумму резерва по данным УСО
	ТЗРезультат.Свернуть("Номенклатура, Склад, Счет, Проект, ЦФО, Качество, Контрагент, Организация,
	|ИГС_КатегорияЗапаса, ИГС_СрокГодности, ИГС_ПлановаяДатаСписания, ИГС_ДокументПриходаДата,  ИГС_ДатаИзмененияКатегории, ИГС_ПричинаИзмененияКатегории, 
	|ИГС_ДокументИзмененияКатегории, ИГС_ЦенаПоступления, ИГС_СуммаПоступления, ИГС_ОборачиваемостьЗаПериод, ИГС_ОборачиваемостьСПоступления, ПроектЗакупа, 
	|Резерв, КоличествоОбъектПроектКуст, ОбъектПроектКуст, ОбъектыРезерва, ОстатокПоПроекту, ОстатокОбщий, Территория, ПорядковыйНомерВПеречнеНВЛ,
	|ДатаПоступленияНаСклад, ВПути, МОЛ_Поставщик, КоличествоДнейБезДвижения, ИнициаторЗаявки, ЕдИзмерения, Родитель1, Родитель2, Родитель3, Родитель4", 
	"Доступно, ВНаличии, ВРезерве, ПлановаяСтоимость, СуммаРезерва");
	
	//ВЕРНУТЬ{
	
	ТЗОрганизации = ТЗРезультат.Скопировать(, "Организация");
	ТЗОрганизации.Свернуть("Организация");
	// <ИГС> Гаврилова А.Н. 09.09.2025 #0162 { 
	ИмяСервиса = "igsBSO";
	ИмяТочкиПодключения = "igsBSOSoap";
	Логин = Строка(
	ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(ОбщегоНазначения.ИдентификаторОбъектаМетаданных("РегистрСведений.ИГС_ФизЛицаДолжности"),
	"Логин"));
	
	Пароль = Строка(
	ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(ОбщегоНазначения.ИдентификаторОбъектаМетаданных("РегистрСведений.ИГС_ФизЛицаДолжности"),
	"Пароль")); 
	
	ДатаНачалаРаботыБСО = Константы.игсДатаПереходаНаБСО.Получить();
	Если Период < ДатаНачалаРаботыБСО Тогда
		ИмяСервиса = "igsUso";
		ИмяТочкиПодключения = "igsUsoSoap"; 
		Логин = "wsFiles";
		Пароль =  "wsP@ssw0rd1809";
	КонецЕсли;
	// <ИГС> } 
	
	Для каждого СтрокаОрганизация Из ТЗОрганизации Цикл
		// <ИГС> Гаврилова А.Н. 09.09.2025 #0162 { 
		Если Период < ДатаНачалаРаботыБСО Тогда
			ВебСервис = СтрокаОрганизация.Организация.игс_ВебСервис;
		Иначе 
			ВебСервис = Константы.игсПутьКВебСервисуБСО.Получить();
		КонецЕсли;
		// <ИГС> }
		Если НЕ ЗначениеЗаполнено(ВебСервис) Тогда			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для организации необходимо задать ссылку на веб-сервис");
			Продолжить;			
		КонецЕсли;
		
		Попытка	
			// <ИГС> Гаврилова А.Н. 09.09.2025 #0162 {
			Определения 		= Новый WSОпределения(ВебСервис, Логин, Пароль); 
			Прокси 		 		= Новый WSПрокси(Определения, "http://127.0.0.1", ИмяСервиса, ИмяТочкиПодключения);       
			Прокси.Пользователь = Логин;
			Прокси.Пароль 		= Пароль; 
			Если Период < ДатаНачалаРаботыБСО Тогда 
				РезультатЗапросаИзУСО = Прокси.ReservesForDeducingTheValueOfMaterialAssets(Дата(Период));
			Иначе 
				РезультатЗапросаИзУСО = Прокси.ReservesForDeducingTheValueOfMaterialAssets(Дата(Период), СтрокаОрганизация.Организация.ИНН);
			КонецЕсли;
			// <ИГС> }
			ТЗРезультатЗапросаИзУСО = ЗначениеИзСтрокиВнутр(РезультатЗапросаИзУСО);
			
			Для каждого Строка Из ТЗРезультатЗапросаИзУСО Цикл
				
				Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(Строка.УникальныйИдентификатор));
				Склад = Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор(Строка.УникальныйИдентификаторСклад));
				
				НайденныеСтроки = ТЗРезультат.НайтиСтроки(Новый Структура("Организация, Номенклатура, Склад", СтрокаОрганизация.Организация, Номенклатура, Склад));
				
				Если НайденныеСтроки.Количество() = 0 
					Или Не ЗначениеЗаполнено(Строка.Сумма) Тогда
					Продолжить;
				КонецЕсли; 
				
				МассивКоэффициентов = Новый Массив;
				Для каждого НайдСтрока Из НайденныеСтроки Цикл
					МассивКоэффициентов.Добавить(НайдСтрока.Доступно);
				КонецЦикла;
				
				МассивРаспределенный = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(-Строка.Сумма, МассивКоэффициентов, 2);
				
				Индекс = 0;
				Для каждого НайдСтрока Из НайденныеСтроки Цикл
					НайдСтрока.СуммаРезерва = МассивРаспределенный[Индекс];	
					Индекс = Индекс + 1;
				КонецЦикла; 
				
			КонецЦикла; 
			
		Исключение
		КонецПопытки;	
		
	КонецЦикла;
	// } ВЕРНУТЬ
	
	// ИГС, Барковская А.П, 10.11.2022 {
	
	///////////////////////// уточнение объектов резерва //////////////////////////////
	
	Для Каждого Строка Из ТЗРезультат Цикл
		
		Если Строка.Резерв = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если Строка.КоличествоОбъектПроектКуст = 1 Тогда
			Строка.ОбъектыРезерва = СтрШаблон("%1 - %2", Строка.Резерв, ПолучитьНаименованиеПроектаКуста(Строка.ОбъектПроектКуст)); 
			Продолжить;
		КонецЕсли;
		
		СтрокаОбъектыРезерва = "";
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СУММА(ИГС_ЗаявкиСБуровой.КоличествоУпаковок) КАК КоличествоУпаковок,
		|	ИГС_ЗаявкиСБуровой.ОбъектПроектКуст КАК ОбъектПроектКуст
		|ИЗ
		|	РегистрСведений.ИГС_ЗаявкиСБуровой КАК ИГС_ЗаявкиСБуровой
		|ГДЕ
		|	ИГС_ЗаявкиСБуровой.СтатусПозиции В (ЗНАЧЕНИЕ(Перечисление.ИГС_СтатусПозицииВЗаявкеСБуровой.СогласованоКОтгрузке), ЗНАЧЕНИЕ(Перечисление.ИГС_СтатусПозицииВЗаявкеСБуровой.Комплектация), ЗНАЧЕНИЕ(Перечисление.ИГС_СтатусПозицииВЗаявкеСБуровой.Скомплектовано))
		|	И ИГС_ЗаявкиСБуровой.Склад = &Склад
		|	И ИГС_ЗаявкиСБуровой.ПроектКОтгрузке = &ПроектКОтгрузке
		|	И ИГС_ЗаявкиСБуровой.Номенклатура = &Номенклатура
		|
		|СГРУППИРОВАТЬ ПО
		|	ИГС_ЗаявкиСБуровой.Номенклатура,
		|	ИГС_ЗаявкиСБуровой.ОбъектПроектКуст,
		|	ИГС_ЗаявкиСБуровой.Склад,
		|	ИГС_ЗаявкиСБуровой.ПроектКОтгрузке";
		
		Запрос.УстановитьПараметр("Склад", Строка.Склад);
		Запрос.УстановитьПараметр("ПроектКОтгрузке", Строка.Проект);
		Запрос.УстановитьПараметр("Номенклатура", Строка.Номенклатура);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			СтрокаОбъектыРезерва = СтрокаОбъектыРезерва + СтрШаблон("%1 - %2%3", Выборка.КоличествоУпаковок, ПолучитьНаименованиеПроектаКуста(Выборка.ОбъектПроектКуст), Символы.ПС);	
		КонецЦикла;
		
		Строка.ОбъектыРезерва = СтрокаОбъектыРезерва;
		
	КонецЦикла;
	
	// } ИГС, Барковская А.П, 10.11.2022
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ТЗРезультат;	
	
КонецФункции

Функция ПолучитьНаименованиеПроектаКуста(ПроектКуст)
	
	Наименование = "";
	
	Если ПроектКуст.Родитель.Наименование = "ПРОЕКТЫ" Тогда // проект
		Возврат СокрЛП(ПроектКуст.Наименование);
		
	ИначеЕсли ПроектКуст.Родитель.Родитель.Наименование = "ПРОЕКТЫ" Тогда // месторождение
		Возврат СокрЛП(ПроектКуст.Родитель.Наименование) + " # " + СокрЛП(ПроектКуст.Наименование);
		
	ИначеЕсли ПроектКуст.Родитель.Родитель.Родитель.Наименование = "ПРОЕКТЫ" Тогда // куст
		Возврат СокрЛП(ПроектКуст.Родитель.Родитель.Наименование) + " # " + СокрЛП(ПроектКуст.Родитель.Наименование) + " # " + СокрЛП(ПроектКуст.Наименование);
		
	ИначеЕсли ПроектКуст.Родитель.Родитель.Родитель.Родитель.Наименование = "ПРОЕКТЫ" Тогда // скважина
		Возврат СокрЛП(ПроектКуст.Родитель.Родитель.Родитель.Наименование) + " # " + СокрЛП(ПроектКуст.Родитель.Родитель.Наименование) + " # " + СокрЛП(ПроектКуст.Родитель.Наименование) + " # " + СокрЛП(ПроектКуст.Наименование);
		
	ИначеЕсли ПроектКуст.Родитель.Родитель.Родитель.Родитель.Родитель.Наименование = "ПРОЕКТЫ" Тогда // этап
		Возврат СокрЛП(ПроектКуст.Родитель.Родитель.Родитель.Родитель.Наименование) + " # " + СокрЛП(ПроектКуст.Родитель.Родитель.Родитель.Наименование) + " # " + СокрЛП(ПроектКуст.Родитель.Родитель.Наименование) + " # " + СокрЛП(ПроектКуст.Родитель.Наименование) + " # " + СокрЛП(ПроектКуст.Наименование);
		
	Иначе
		Возврат СокрЛП(ПроектКуст.Наименование);	
		
	КонецЕсли; 
	
КонецФункции // ПолучитьНаименованиеПроектаКуста()

Функция ПолучитьТЗОстаткиЗабалансИОС(Период)	// {{ ИГС Барковская А.П, 23.03.2023 }} 
	
	МояСхема = ПолучитьМакет("ВременнаяСхемаКомпоновкиЗабалансИОС");
	
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	МояСхема.Параметры.ДатаАктуальности.Значение = Новый Граница(КонецДня(Период), ВидГраницы.Включая);
	
	МоиНастройки = МояСхема.НастройкиПоУмолчанию;
	ПеренестиОтборы(Настройки, МоиНастройки);
	
	ТЗ = Новый ТаблицаЗначений;
	
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных; 
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МойМакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(МояСхема, МоиНастройки, ДанныеРасшифровки, , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МойМакетКомпоновкиДанных,, ДанныеРасшифровки, Истина);
	ПроцессорВыводаВКоллекцию = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВыводаВКоллекцию.УстановитьОбъект(ТЗ);
	ПроцессорВыводаВКоллекцию.Вывести(ПроцессорКомпоновкиДанных,Истина);
	
	Возврат ТЗ;
	
КонецФункции

Процедура ЗаполнитьОбщийОстатокПоНоменклатуре(ТЗСвободныеОстаткиСЦФО, ТЗОСтаткиЗабалансИОС)	// {{ ИГС Барковская А.П, 30.03.2023 }}
	
	ТЗНомЗабаланс = ТЗОСтаткиЗабалансИОС.Скопировать(Новый Структура("ТипНоменклатура", Истина));
	
	Если ТЗНомЗабаланс.Количество() = 0 Или ТЗСвободныеОстаткиСЦФО.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТЗНомЗабаланс.Свернуть("Номенклатура, ОстатокОбщий");
	
	Для каждого ном_заб Из ТЗНомЗабаланс Цикл
		
		СтрокиНом = ТЗСвободныеОстаткиСЦФО.НайтиСтроки(Новый Структура("Номенклатура", ном_заб.Номенклатура));
		
		Если СтрокиНом.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ОбщийОстаток = ном_заб.ОстатокОбщий + СтрокиНом[0].ОстатокОбщий; 
		Для каждого стр Из СтрокиНом Цикл
			стр.ОстатокОбщий = ОбщийОстаток;
		КонецЦикла; 
		
		СтрокиНом = ТЗОСтаткиЗабалансИОС.НайтиСтроки(Новый Структура("Номенклатура", ном_заб.Номенклатура));
		Для каждого стр Из СтрокиНом Цикл
			стр.ОстатокОбщий = ОбщийОстаток;
		КонецЦикла;
		
	КонецЦикла; 
	
	ТЗОСтаткиЗабалансИОС.Колонки.Удалить("ТипНоменклатура");
	
КонецПроцедуры