
#Область ОбработчикСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	// Поиск Индексов параметров 
	ПериодИндекс	= ПолучитьИндексПараметра(КомпоновщикНастроек.ПользовательскиеНастройки.Элементы, "Период");
	ОрганизацияИндекс	= ПолучитьИндексПараметра(КомпоновщикНастроек.ПользовательскиеНастройки.Элементы, "Организация");
	
	Если ПериодИндекс = -1 ИЛИ ОрганизацияИндекс = -1 Тогда
		Возврат;	
	КонецЕсли;
	
	// Чтение параметров пользователя
	НачалоПериода	= КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[ПериодИндекс].Значение.ДатаНачала;
	КонецПериода	= КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[ПериодИндекс].Значение.ДатаОкончания;
	Организация		= КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[ОрганизацияИндекс].Значение;
	
	Запрос = Новый Запрос;
	Запрос.Текст = игсОборотныйДляБДР.ТекстЗапроса();
	
	// Установка пользовательских параметров
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	Запрос.УстановитьПараметр("СписокСвертки", );

	СтруктураПараметров = игсОборотныйДляБДР.КонстантныеПараметры(Организация);     
	
	// Константные параметры
	Запрос.УстановитьПараметр("СубконтоДт", СтруктураПараметров.СубконтоДт);
	Запрос.УстановитьПараметр("СубконтоДтОбщ", СтруктураПараметров.СубконтоДтОбщ);
	Запрос.УстановитьПараметр("СубконтоПрочиеДоходыРасходы", СтруктураПараметров.СубконтоПрочиеДоходыРасходы);
	Запрос.УстановитьПараметр("Субконто4642", СтруктураПараметров.Субконто4642);
	Запрос.УстановитьПараметр("Субконто9001", СтруктураПараметров.Субконто9001);
	Запрос.УстановитьПараметр("Счет4662", СтруктураПараметров.Счет4662);
	Запрос.УстановитьПараметр("СчетаЗатрат", СтруктураПараметров.СчетаЗатрат);
	Запрос.УстановитьПараметр("ВидРезерваУбыточныхПроектов", СтруктураПараметров.ВидРезерваУбыточныхПроектов);
	Запрос.УстановитьПараметр("Счет10", СтруктураПараметров.Счет10);
	Запрос.УстановитьПараметр("Счет20", СтруктураПараметров.Счет20);
	Запрос.УстановитьПараметр("Счет23", СтруктураПараметров.Счет23);
	Запрос.УстановитьПараметр("Счет25", СтруктураПараметров.Счет25);
	Запрос.УстановитьПараметр("Счет26", СтруктураПараметров.Счет26);
	Запрос.УстановитьПараметр("Счет29", СтруктураПараметров.Счет29);
	Запрос.УстановитьПараметр("Счет90", СтруктураПараметров.Счет90);
	Запрос.УстановитьПараметр("Счет96", СтруктураПараметров.Счет96);
	Запрос.УстановитьПараметр("Счет0201", СтруктураПараметров.Счет0201);
	Запрос.УстановитьПараметр("Счет7101", СтруктураПараметров.Счет7101);
	Запрос.УстановитьПараметр("Счет9101", СтруктураПараметров.Счет9101);
	Запрос.УстановитьПараметр("Счет9102", СтруктураПараметров.Счет9102);
	Запрос.УстановитьПараметр("Счет9609", СтруктураПараметров.Счет9609);

	Запрос.УстановитьПараметр("НДС10", СтруктураПараметров.НДС10);
	Запрос.УстановитьПараметр("НДС18", СтруктураПараметров.НДС18);
	Запрос.УстановитьПараметр("НДС20", СтруктураПараметров.НДС20);

    ОборотныйБДР = Запрос.Выполнить().Выгрузить();
	
	// Вывод отчета с использованием внешнего набора данных
	СхемаКомпоновкиДанных = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы[ПериодИндекс].Значение.ДатаНачала = НачалоПериода; 
	КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы[ПериодИндекс].Значение.ДатаОкончания = КонецПериода;
	КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы[ОрганизацияИндекс].Значение = Организация;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.Настройки, ДанныеРасшифровки);
	
	ВнешнийНаборДанных = Новый Структура("ОборотныйБДР", ОборотныйБДР);
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешнийНаборДанных, ДанныеРасшифровки);
	
	ДокументРезультат.Очистить();
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс
 
Функция СведенияОВнешнейОбработке() Экспорт

    ИмяОтчета = ЭтотОбъект.Метаданные().Имя;
    Синоним = ЭтотОбъект.Метаданные().Синоним;
    Синоним = ?(ЗначениеЗаполнено(Синоним), Синоним, ИмяОтчета);

    РегистрационныеДанные = Новый Структура;
    РегистрационныеДанные.Вставить("Вид", "ДополнительныйОтчет");
    РегистрационныеДанные.Вставить("Наименование", Синоним);
    РегистрационныеДанные.Вставить("Версия", "1.0");
    РегистрационныеДанные.Вставить("БезопасныйРежим", Истина);
    РегистрационныеДанные.Вставить("Информация", "Обороты для БДР (с корреспонденцией счетов для PNL).
	|
	|Автор: <ИГС> ПР Потылицын Г.С. #0135, 20.08.2025");

    ТаблицаКоманд = ПолучитьТаблицуКоманд();

    ДобавитьКоманду(ТаблицаКоманд, Синоним, "СформироватьОтчет", "ОткрытиеФормы", Истина);

    РегистрационныеДанные.Вставить("Команды", ТаблицаКоманд);

    Возврат РегистрационныеДанные;

КонецФункции 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьТаблицуКоманд()

    Команды = Новый ТаблицаЗначений;
    Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
    Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
    Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
    Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));
    Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));

    Возврат Команды;

КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование = "ОткрытиеФормы", ПоказыватьОповещение = Ложь, Модификатор = "ПечатьMXL")

    НоваяКоманда = ТаблицаКоманд.Добавить();
    НоваяКоманда.Представление = Представление;
    НоваяКоманда.Идентификатор = Идентификатор;
    НоваяКоманда.Использование = Использование;
    НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
    НоваяКоманда.Модификатор = Модификатор; 
	
КонецПроцедуры

// Возвращает Индекс параметра
// * КоллекцияЭлементов - область поиска параметров;
// * ИмяПараметра - имя по которому будет осуществляться поиск
Функция ПолучитьИндексПараметра(КоллекцияЭлементов, ИмяПараметра)
	
	Индекс = 0;
	
	Для Каждого Элемент Из КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
		
		Если Строка(Элемент.Параметр) = ИмяПараметра Тогда
			Возврат Индекс;
		КонецЕсли;
		
	Индекс = Индекс + 1;
	КонецЦикла;

    Возврат -1;
	
КонецФункции

#КонецОбласти
