 
 Функция СведенияОВнешнейОбработке() Экспорт
	 
	 ИмяОтчета = ЭтотОбъект.Метаданные().Имя;
	 Синоним = ЭтотОбъект.Метаданные().Синоним;
	 Синоним = ?(ЗначениеЗаполнено(Синоним), Синоним, ИмяОтчета);
	 
	 РегистрационныеДанные = Новый Структура;
	 РегистрационныеДанные.Вставить("Вид", "ДополнительныйОтчет");
	 РегистрационныеДанные.Вставить("Наименование", Синоним);
	 РегистрационныеДанные.Вставить("Версия", "1.1");
	 РегистрационныеДанные.Вставить("БезопасныйРежим", Истина);
	 РегистрационныеДанные.Вставить("Информация", "Отчет " + Синоним);
	 
	 ТаблицаКоманд = ПолучитьТаблицуКоманд();
	 
	 ДобавитьКоманду(ТаблицаКоманд, Синоним, "СформироватьОтчет", "ОткрытиеФормы", Истина);
	 РегистрационныеДанные.Вставить("Команды", ТаблицаКоманд);
	 Возврат РегистрационныеДанные;
	 
 КонецФункции
 
 Функция ПолучитьТаблицуКоманд()
	 
	 Команды = Новый ТаблицаЗначений;
	 Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	 Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	 Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	 Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));
	 Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
	 
	 Возврат Команды;
	 
 КонецФункции
 
 Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование = "ОткрытиеФормы", ПоказыватьОповещение = Ложь, Модификатор = "ПечатьMXL")
	 
	 НоваяКоманда = ТаблицаКоманд.Добавить();
	 НоваяКоманда.Представление = Представление;
	 НоваяКоманда.Идентификатор = Идентификатор;
	 НоваяКоманда.Использование = Использование;
	 НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
	 НоваяКоманда.Модификатор = Модификатор;                                                                                          
 КонецПроцедуры
 
 
 Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	 
	 СтандартнаяОбработка = Ложь;
	 
	 ПараметрКонецПериода = ЭтотОбъект.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("Период");
	 
	 Если ЗначениеЗаполнено(КонПериода) Тогда		
		 ПараметрКонецПериода.Использование 	= Истина;
		 ПараметрКонецПериода.Значение 		= КонецДня(КонПериода);
	 Иначе
		 КонПериода = ТекущаяДатаСеанса();	  	
	 КонецЕсли;	
	 
	 СхемаКомпоновкиДанных = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	 
	 Настройки = КомпоновщикНастроек.ПолучитьНастройки(); 
	 
	 ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных; 
	 
	 КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;	
	 МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);	
	 
	 Период = Настройки.ПараметрыДанных.Элементы.Найти("Период").Значение;
	 Организация = Настройки.ПараметрыДанных.Элементы.Найти("Организация").Значение;
	 
	 Если ТаблицаДляОтчета.Количество() = 0 Тогда
		 ТЗВывод = ПолучитьТЗДляВывода(Период, Организация);
	 Иначе
		 ТЗВывод = ТаблицаДляОтчета.Скопировать();
	 КонецЕсли;
	 
	 ВнешнийНаборДанных = Новый Структура("ВТ_ОстаткиПоДатам", ТЗВывод); 
	 ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных; 
	 ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешнийНаборДанных, ДанныеРасшифровки); 
	 
	 ДокументРезультат.Очистить();
	 
	 ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент; 
	 ПроцессорВывода.УстановитьДокумент(ДокументРезультат); 
	 ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	 
 КонецПроцедуры
 
 
 Процедура ПеренестиОтборы(КомпоновщикИсточник, КомпоновщикПриемник)
	 Для Каждого ЭлОтбора Из КомпоновщикИсточник.Отбор.Элементы Цикл
		 Если ЭлОтбора.Использование Тогда
			 НовОтбор = КомпоновщикПриемник.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			 ЗаполнитьЗначенияСвойств(НовОтбор, ЭлОтбора);
		 КонецЕсли;
	 КонецЦикла;
 КонецПроцедуры
 
 Функция ПолучитьТЗДляВывода(Период, Организация) Экспорт
	 
	 МояСхема = ПолучитьМакет("ВременнаяСхемаКомпановки");
	 Запрос = Новый Запрос;
	 
	 Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	 МояСхема.Параметры.Период.Значение = Новый Граница(КонецДня(Период), ВидГраницы.Включая);
	 МояСхема.Параметры.ДатаАктуальности.Значение = Новый Граница(КонецДня(Период), ВидГраницы.Включая);
	 МояСхема.Параметры.Организация.Значение = Организация;
	 МоиНастройки = МояСхема.НастройкиПоУмолчанию;
	 ПеренестиОтборы(Настройки, МоиНастройки);	
	 
	 ТЗ = Новый ТаблицаЗначений;
	 ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных; 
	 
	 КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	 МакетКомпоновкиДанных 	= КомпоновщикМакета.Выполнить(МояСхема, Настройки, ДанныеРасшифровки, ,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	 
	 МойМакетКомпоновкиДанных 	= КомпоновщикМакета.Выполнить(МояСхема, МоиНастройки, ДанныеРасшифровки, ,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	 
	 ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	 ПроцессорКомпоновкиДанных.Инициализировать(МойМакетКомпоновкиДанных,, ДанныеРасшифровки, Истина);
	 ПроцессорВыводаВКоллекцию = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	 ПроцессорВыводаВКоллекцию.УстановитьОбъект(ТЗ);
	 ПроцессорВыводаВКоллекцию.Вывести(ПроцессорКомпоновкиДанных,Истина);
	 
	 игс_ПолучитьОстаткиERP(ТЗ, КонецДня(Период), Организация); 
	 Запрос.Текст = "ВЫБРАТЬ
	 |	Таб.Организация КАК Организация,
	 |	Таб.Счет КАК Счет,
	 |	Таб.Склад КАК Склад,
	 |	Таб.Номенклатура КАК Номенклатура,
	 |	Таб.ОстатокУСО КАК ОстатокУСО,
	 |	Таб.ОстатокERP КАК ОстатокERP
	 |ПОМЕСТИТЬ ВТ_Получено
	 |ИЗ
	 |	&Таб КАК Таб
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	 |	ВТ_Получено.Организация,
	 |	ВТ_Получено.Счет,
	 |	ВТ_Получено.Склад,
	 |	ВТ_Получено.Номенклатура,
	 |	СУММА(ВТ_Получено.ОстатокУСО) КАК ОстатокУСО,
	 |	СУММА(ВТ_Получено.ОстатокERP) КАК ОстатокERP
	 |ПОМЕСТИТЬ ВТ_ПолученоИтог
	 |ИЗ
	 |	ВТ_Получено КАК ВТ_Получено
	 |
	 |СГРУППИРОВАТЬ ПО
	 |	ВТ_Получено.Организация,
	 |	ВТ_Получено.Счет,
	 |	ВТ_Получено.Склад,
	 |	ВТ_Получено.Номенклатура
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	ВТ_ПолученоИтог.Организация,
	 |	ВТ_ПолученоИтог.Счет,
	 |	ВТ_ПолученоИтог.Склад,
	 |	ВТ_ПолученоИтог.Номенклатура,
	 |	ВТ_ПолученоИтог.ОстатокУСО,
	 |	ВТ_ПолученоИтог.ОстатокERP
	 |ИЗ
	 |	ВТ_ПолученоИтог КАК ВТ_ПолученоИтог
	 |ГДЕ
	 |	ВТ_ПолученоИтог.ОстатокУСО <> ВТ_ПолученоИтог.ОстатокERP";
	 
	 Запрос.УстановитьПараметр("Таб",ТЗ);
	 УстановитьПривилегированныйРежим(Истина);
	 ТЗРезультат = Запрос.Выполнить().Выгрузить();
	 УстановитьПривилегированныйРежим(Ложь);
	 
	 Возврат ТЗРезультат;	
	 
 КонецФункции
 
 Процедура игс_ПолучитьОстаткиERP(Таблица, Дата, Организация) Экспорт
	 
	 Попытка
		 
		 ПутьКСервису =  ПланыВидовХарактеристик.игсНастройкиМеханизмов.ПутьКWebСервисуERP;
		 ВебСервис = игсНастройкиМеханизмовВызовСервера.ПолучитьЗначениеНастройки(ПутьКСервису,Организация);
		 
		 Логин = Строка(
		 ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(ОбщегоНазначения.ИдентификаторОбъектаМетаданных("РегистрСведений.игсНастройкиМеханизмов"),
		 "Логин"));
		 
		 Пароль = Строка(
		 ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(ОбщегоНазначения.ИдентификаторОбъектаМетаданных("РегистрСведений.игсНастройкиМеханизмов"),
		 "Пароль")); 
		 
		 Если Логин = "" Или Пароль = "" Тогда  			
			 ОбщегоНазначения.СообщитьПользователю("Не заполнены логин и пароль для подключения к программе ERP МТО!");
			 Возврат;
		 КонецЕсли;
		 
		 Определения 		= Новый WSОпределения(ВебСервис, Логин, Пароль); 
		 Прокси 		 		= Новый WSПрокси(Определения, "http://127.0.0.1", "igsERP", "igsERPSoap", ,10);       
		 Прокси.Пользователь = Логин;
		 Прокси.Пароль 		= Пароль;
		 
		 УстановитьПривилегированныйРежим(Истина);
		 Результат = Прокси.NomeclatureQuantity(Дата, Строка(Организация.УникальныйИдентификатор()));
		 УстановитьПривилегированныйРежим(Ложь);
		 
		 Для Каждого Line Из Результат.List Цикл
			 
			 ОРгСправ = Справочники.Организации.ПолучитьСсылку(Новый УникальныйИдентификатор(Line.Org));
			 Если Не ОбщегоНазначения.СсылкаСуществует(ОРгСправ) Тогда
				 Продолжить;
			 КонецЕсли;
			 
			 СтруктураПоиска = Новый Структура;
			 
			 Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(Line.Nomenclature));
			 Если Номенклатура.ПолучитьОбъект() = Неопределено Тогда
				 Номенклатура = Справочники.ОсновныеСредства.ПолучитьСсылку(Новый УникальныйИдентификатор(Line.Nomenclature));
			 КонецЕсли; 
			 
			 СтруктураПоиска.Вставить("Номенклатура", Номенклатура);
			 
			 Если Line.Account = "003.02" Тогда
				 СтруктураПоиска.Вставить("Склад", Справочники.НоменклатурныеГруппы.ПолучитьСсылку(Новый УникальныйИдентификатор(Line.Storage)));
			 Иначе
				 СтруктураПоиска.Вставить("Склад", Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор(Line.Storage)));
			 КонецЕсли;
			 
			 СтруктураПоиска.Вставить("Счет", ПланыСчетов.Хозрасчетный.НайтиПоКоду(Line.Account));
			 СтруктураПоиска.Вставить("Организация", ОРгСправ);
			 
			 МассивСтрок = Таблица.НайтиСтроки(СтруктураПоиска);
			 
			 Если МассивСтрок.Количество()=0 Тогда
				 
				 НовСтрок = Таблица.Добавить();
				 НовСтрок.Номенклатура = Номенклатура;
				 Если Line.Account = "003.02" Тогда
					 НовСтрок.Склад = Справочники.НоменклатурныеГруппы.ПолучитьСсылку(Новый УникальныйИдентификатор(Line.Storage));
				 Иначе	
					 НовСтрок.Склад = Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор(Line.Storage));
				 КонецЕсли; 
				 
				 НовСтрок.Счет = ПланыСчетов.Хозрасчетный.НайтиПоКоду(Line.Account);
				 НовСтрок.Организация = Справочники.Организации.ПолучитьСсылку(Новый УникальныйИдентификатор(Line.Org));
				 НовСтрок.ОстатокУСО = 0;
				 НовСтрок.ОстатокERP = Line.Quantity;	
			 Иначе	
				 Для Каждого Строка Из МассивСтрок Цикл 
					 Строка.ОстатокERP = Line.Quantity;
				 КонецЦикла;
				 
			 КонецЕсли;
			 
		 КонецЦикла;
		 
	 Исключение
		 Ошибка = ИнформацияОбОшибке();
		 ОшибкаКратко = КраткоеПредставлениеОшибки(Ошибка);
		 ОшибкаПодробно = ПодробноеПредставлениеОшибки(Ошибка);
		 ЗаписьЖурналаРегистрации("Ошибки", УровеньЖурналаРегистрации.Ошибка,,, ОшибкаПодробно);
	 КонецПопытки;
	 
 КонецПроцедуры  
