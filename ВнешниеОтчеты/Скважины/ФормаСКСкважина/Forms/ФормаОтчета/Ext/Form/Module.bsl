Функция ПолучитьТаблицуДанных(ДатаНа, датаКон)
	
Запрос = Новый Запрос;
Запрос.Текст = "ВЫБРАТЬ
               |	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК Субконто1,
               |	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстаток КАК СуммаКонечныйОстаток,
               |	ХозрасчетныйОстаткиИОбороты.СуммаОборот КАК СуммаОборот,
               |	""Выручка"" КАК Назначение
               |ИЗ
               |	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, Регистратор, , Счет В ИЕРАРХИИ (&СчетВыручка), &СубконтоНГ, ) КАК ХозрасчетныйОстаткиИОбороты
               |
               |ОБЪЕДИНИТЬ ВСЕ
               |
               |ВЫБРАТЬ
               |	ХозрасчетныйОстаткиИОбороты.Субконто1,
               |	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстаток,
               |	ХозрасчетныйОстаткиИОбороты.СуммаОборот,
               |	""Резерв""
               |ИЗ
               |	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, Регистратор, , Счет В ИЕРАРХИИ (&СчетРезерв), &СубконтоНГ, ) КАК ХозрасчетныйОстаткиИОбороты
               |
               |ОБЪЕДИНИТЬ ВСЕ
               |
               |ВЫБРАТЬ
               |	ХозрасчетныйОстаткиИОбороты.Субконто1,
               |	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстаток,
               |	ХозрасчетныйОстаткиИОбороты.СуммаОборот,
               |	""ЗатратыПроектов""
               |ИЗ
               |	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, Регистратор, , Счет В ИЕРАРХИИ (&СчетЗатратПроектов), &СубконтоНГ, ) КАК ХозрасчетныйОстаткиИОбороты
               |ИТОГИ
               |	СУММА(СуммаКонечныйОстаток),
               |	СУММА(СуммаОборот)
               |ПО
               |	Субконто1 ИЕРАРХИЯ";
Запрос.Параметры.Вставить("КонецПериода", датаКон);
Запрос.Параметры.Вставить("СчетВыручка", ПланыСчетов.Хозрасчетный.Выручка);
Запрос.Параметры.Вставить("НачалоПериода", ДатаНа);
Запрос.Параметры.Вставить("СчетРезерв", ПланыСчетов.Хозрасчетный.РезервыПредстоящихРасходов);
МассивСчетов = Новый Массив;
МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство);
МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.Полуфабрикаты);
МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства);
Запрос.Параметры.Вставить("СчетЗатратПроектов", МассивСчетов);
Запрос.Параметры.Вставить("Субконтонг",ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы);
Результат = Запрос.Выполнить();
ТабДанных = Результат.Выгрузить();

Возврат ТабДанных;
	
КонецФункции

Процедура ОбновитьСписокСценариев()

	Определения     = Новый WSОпределения("http://1c01-igs-msk1/erp_igs/ws/igs.1cws?wsdl", "wsFiles", "wsP@ssw0rd1809");
	Прокси          = Новый WSПрокси(Определения, "http://127.0.0.1", "IGS", "IGSSoap");       
	Прокси.Пользователь = "wsFiles";
	Прокси.Пароль     = "wsP@ssw0rd1809";
	
	Элементы.СценарийФакт.СписокВыбора.ЗагрузитьЗначения(ЗначениеИзСтрокиВнутр(Прокси.GetListScenarios(ПериодОтчета.ДатаНачала)).ВыгрузитьЗначения());
	Элементы.Сценарий.СписокВыбора.ЗагрузитьЗначения(ЗначениеИзСтрокиВнутр(Прокси.GetListScenarios(ПериодОтчета.ДатаНачала)).ВыгрузитьЗначения());
	Сценарий 		= "";
	СценарийФакт    = "Текущий";

КонецПроцедуры 
&НаКлиенте
Процедура ДействияФормыОтчетСформировать(Кнопка)
	
	Если Не ЗначениеЗаполнено(ПериодОтчета) 
		ИЛИ Не ЗначениеЗаполнено(ПериодОтчета) Тогда
		Сообщить("Не указан период отчета.");
		Возврат;
	КонецЕсли; 
	Если НачалоМесяца(ПериодОтчета.ДатаНачала) <> НачалоМесяца(ПериодОтчета.ДатаОкончания) Тогда
		Сообщить("Необходимо указывать даты принадлежащие одному месяцу.");
		Возврат;	
	КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(Сценарий) Тогда
		Сообщить("Необходимо выбрать утвержденный сценарий прогноз.");	
		Возврат;
	КонецЕсли; 
	Если Не ЗначениеЗаполнено(СценарийФакт) Тогда
		Сообщить("Необходимо выбрать утвержденный сценарий факт.");	
		Возврат;
	КонецЕсли; 
	
	ТабДок = ПолеТабличногоДокумента;
	Отчет(ТабДок);
	
КонецПроцедуры




&НаСервере
Процедура Отчет(ТабДок) Экспорт

	ТабДок.Очистить();
	
	МассивПостфиксов = Новый Массив();
	МассивПостфиксов.Добавить("0");
	МассивПостфиксов.Добавить("1");
	МассивПостфиксов.Добавить("2");
	МассивПостфиксов.Добавить("3");
	МассивПостфиксов.Добавить("");
	МассивПостфиксов.Добавить("Итого");
	
	МассивПоказателей = Новый Массив();
	МассивПоказателей.Добавить("Выручка");
	МассивПоказателей.Добавить("Расходы");
	МассивПоказателей.Добавить("Прибыль");
	МассивПоказателей.Добавить("Резерв");
	МассивПоказателей.Добавить("АВыручка");
	МассивПоказателей.Добавить("УпрВыручка");
	МассивПоказателей.Добавить("УпрРасходы");
	МассивПоказателей.Добавить("УпрПрибыль");
	МассивПоказателей.Добавить("УпрРасходы91_");
	МассивПоказателей.Добавить("ПрибыльДоНалога");
	МассивПоказателей.Добавить("УпрПрибыльДоНалога");
	
	// Данные ERP
	Попытка
		
		
	ТаблицаСкважин = Новый ТаблицаЗначений;
	ТаблицаСкважин.Колонки.Добавить("Месторождение",		Новый ОписаниеТипов("Строка", ,
													Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)));
	ТаблицаСкважин.Колонки.Добавить("Скважина",		Новый ОписаниеТипов("Строка", ,
													Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)));
	Для каждого Строка Из Скважина Цикл
	
		Если ЗначениеЗаполнено(Строка.Значение) Тогда
			
			НоваяСтрока 				= ТаблицаСкважин.Добавить();
			НоваяСтрока.Месторождение	= Строка(Строка.Значение.Родитель.Родитель);
			НоваяСтрока.Скважина 		= Строка(Строка.Значение);
			
		КонецЕсли; 
	
	КонецЦикла; 
		
	Определения     = Новый WSОпределения("http://1c01-igs-msk1/erp_igs/ws/igs.1cws?wsdl", "wsFiles", "wsP@ssw0rd1809");
	Прокси          = Новый WSПрокси(Определения, "http://127.0.0.1", "IGS", "IGSSoap");       
	Прокси.Пользователь = "wsFiles";
	Прокси.Пароль     = "wsP@ssw0rd1809";
	ТаблицаУпр 		= ЗначениеИзСтрокиВнутр(Прокси.ПолучитьБДРПоЭтапам(ПериодОтчета.ДатаНачала, Сценарий, СценарийФакт, ЗначениеВСтрокуВнутр(ТаблицаСкважин)));	
	ТаблицаУпр.Колонки.Удалить("Проект");
	ТаблицаУпр.Колонки.Добавить("Проект", Новый ОписаниеТипов("СправочникСсылка.НоменклатурныеГруппы"));
	
	// Показатели отчета
	Для каждого ИмяПоказатель Из МассивПоказателей Цикл
		Для каждого ИмяПостфикс Из МассивПостфиксов Цикл
			ТаблицаУпр.Колонки.Добавить(ИмяПоказатель + ИмяПостфикс, Новый ОписаниеТипов("Число",
													   Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));
		КонецЦикла; 
	КонецЦикла; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Проекты.Ссылка КАК Ссылка,
	               |	ПРЕДСТАВЛЕНИЕ(Проекты.Ссылка) КАК Наименование,
	               |	ПРЕДСТАВЛЕНИЕ(Проекты.Родитель) КАК Родитель1,
	               |	ПРЕДСТАВЛЕНИЕ(Проекты.Родитель.Родитель) КАК Родитель2,
	               |	ПРЕДСТАВЛЕНИЕ(Проекты.Родитель.Родитель.Родитель) КАК Родитель3
	               |ИЗ
	               |	Справочник.НоменклатурныеГруппы КАК Проекты
	               |ГДЕ
	               |	НЕ Проекты.ПометкаУдаления";
	Результат = Запрос.Выполнить();
	ТаблПроектыПоСтроке = Результат.Выгрузить();
	ТаблПроектыПоСтроке.Колонки.Добавить("ПроектСтрока", Новый ОписаниеТипов("Строка", ,
														 Новый КвалификаторыСтроки(150, ДопустимаяДлина.Переменная)));
	ТаблПроектыПоСтроке.Индексы.Добавить("ПроектСтрока");
	Для каждого Строка Из ТаблПроектыПоСтроке Цикл
		Строка.ПроектСтрока = Строка.Наименование + " # " 
			+ УдалитьПослеСкобочек(Строка.Родитель1) + " # "
			+ УдалитьПослеСкобочек(Строка.Родитель2) + " # "
			+ УдалитьПослеСкобочек(Строка.Родитель3);
	КонецЦикла; 
	
	// Преобразуем данные ERP к данным УСО
	Для каждого СтрокаУпр Из ТаблицаУпр Цикл
		
		ЭтапУСО = Справочники.НоменклатурныеГруппы.НайтиПоНаименованию(СтрокаУпр.ЭтапСтрока);
		Если ЗначениеЗаполнено(ЭтапУСО) Тогда
			СтрокаУпр.Проект = ЭтапУСО.Проект;
		Иначе
			
			МассивПроект 			= ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(СтрокаУпр.ЭтапСтрока, " # ");
			ПроектПоШаблону 		= МассивПроект[0] + " # " + МассивПроект[1] + " # " + МассивПроект[2] + " # " + МассивПроект[3];
			СтрокаПроектПоСтроке 	= ТаблПроектыПоСтроке.Найти(ПроектПоШаблону, "ПроектСтрока");
			Если СтрокаПроектПоСтроке = Неопределено Тогда
				СтрокаПроектПоСтроке 	= ТаблПроектыПоСтроке.Найти(СтрЗаменить(ПроектПоШаблону, "без куста", "Без куста"), "ПроектСтрока");
			КонецЕсли; 
			
			Если СтрокаПроектПоСтроке = Неопределено Тогда
				Сообщить("Не найден в УСО этап " + СтрокаУпр.ЭтапСтрока);
			Иначе
				СтрокаУпр.Проект 	= СтрокаПроектПоСтроке.Ссылка;
			КонецЕсли; 
			
		КонецЕсли;
		
		Если СтрокаУпр.Показатель = "Выручка" Тогда
			СтрокаУпр.УпрВыручка0		= СтрокаУпр.УпрВыручка0 + СтрокаУпр.Сумма2020;
			СтрокаУпр.УпрВыручка1		= СтрокаУпр.УпрВыручка1 + СтрокаУпр.Сумма2021До;
			СтрокаУпр.УпрВыручка2		= СтрокаУпр.УпрВыручка2 + СтрокаУпр.Сумма2021После;
			СтрокаУпр.УпрВыручка		= СтрокаУпр.УпрВыручка + СтрокаУпр.СуммаМесяц;
		ИначеЕсли СтрокаУпр.Показатель = "Расходы" Тогда
			СтрокаУпр.УпрРасходы0		= СтрокаУпр.УпрРасходы0 + СтрокаУпр.Сумма2020;
			СтрокаУпр.УпрРасходы1		= СтрокаУпр.УпрРасходы1 + СтрокаУпр.Сумма2021До;
			СтрокаУпр.УпрРасходы2		= СтрокаУпр.УпрРасходы2 + СтрокаУпр.Сумма2021После;
			СтрокаУпр.УпрРасходы		= СтрокаУпр.УпрРасходы + СтрокаУпр.СуммаМесяц;
		ИначеЕсли СтрокаУпр.Показатель = "РасходыДоходы91" Тогда
			СтрокаУпр.УпрРасходы91_0	= СтрокаУпр.УпрРасходы91_0 + СтрокаУпр.Сумма2020;
			СтрокаУпр.УпрРасходы91_1	= СтрокаУпр.УпрРасходы91_1 + СтрокаУпр.Сумма2021До;
			СтрокаУпр.УпрРасходы91_2	= СтрокаУпр.УпрРасходы91_2 + СтрокаУпр.Сумма2021После;
			СтрокаУпр.УпрРасходы91_		= СтрокаУпр.УпрРасходы91_ + СтрокаУпр.СуммаМесяц;
		КонецЕсли; 		
		
	КонецЦикла; 
	ТаблицаУпр.Свернуть("Проект", "УпрВыручка0, УпрВыручка1, УпрВыручка2, УпрВыручка, УпрРасходы0, УпрРасходы1, УпрРасходы2, УпрРасходы, УпрРасходы91_0, УпрРасходы91_1, УпрРасходы91_2, УпрРасходы91_");
	
	Если Скважина.Количество() <> 0 Тогда
		//ТаблицаУпр = ТаблицаУпр.Скопировать(Новый Структура("Проект", Скважина));
		ПроектыУдалить = Новый Массив();
		
		Для каждого Строка Из ТаблицаУпр Цикл
			
			Если Скважина.НайтиПоЗначению(Строка.Проект) = Неопределено Тогда
				
				ПроектыУдалить.Добавить(Строка);
				
			КонецЕсли; 
			
		КонецЦикла; 
		
		Для каждого Строка Из ПроектыУдалить Цикл
			
			ТаблицаУпр.Удалить(Строка);
		
		КонецЦикла; 
		
	КонецЕсли; 
	
	Исключение
		
	Сообщить("Не удалось получить данные из ERP, " + ОписаниеОшибки());
	Возврат;
	
	КонецПопытки;
	ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
	Макет 				= ОтчетОбъект.ПолучитьМакет("макет");
	Область 			= Макет.ПолучитьОбласть("Проект");
	КонецПрошлогоГода 	= НачалоГода(ПериодОтчета.ДатаНачала) - 1;
	Таблица0    		= ПолучитьТаблицуДанных(НачалоМесяца(КонецПрошлогоГода), КонецПрошлогоГода);
	Если Месяц(ПериодОтчета.ДатаОкончания) <> 1 Тогда
		Таблица1		= ПолучитьТаблицуДанных(НачалоГода(ПериодОтчета.ДатаНачала), НачалоМесяца(ПериодОтчета.ДатаНачала) - 1);
	Иначе
		Таблица1		=  Неопределено;
	КонецЕсли; 
	Таблица				= ПолучитьТаблицуДанных(ПериодОтчета.ДатаНачала, ПериодОтчета.ДатаОкончания);
	
	ТаблицаПроектов = ТаблицаУпр.Скопировать(, "Проект");
	ТаблицаПроектов.Свернуть("Проект", "");
	ТаблицаПроектов.Сортировать("Проект Возр");
	
	Для каждого СтрокаПроекта Из ТаблицаПроектов Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаПроекта.Проект) Тогда
			Продолжить;		
		КонецЕсли; 
		
		Строка = Таблица.Найти(СтрокаПроекта.Проект, "Проект");
		
		СтруктураДанных = Новый Структура("Проект");
		Для каждого ИмяПоказатель Из МассивПоказателей Цикл
			Для каждого ИмяПостфикс Из МассивПостфиксов Цикл
				СтруктураДанных.Вставить(ИмяПоказатель + ИмяПостфикс, 0);
			КонецЦикла; 
		КонецЦикла; 
		
		// Упр. учет
		ТаблицаУпрПоПроекту = ТаблицаУпр.Скопировать(Новый Структура("Проект", СтрокаПроекта.Проект));
		
		СтруктураДанных.УпрВыручка0		= СтруктураДанных.УпрВыручка0 + ТаблицаУпрПоПроекту.Итог("УпрВыручка0");
		СтруктураДанных.УпрВыручка1		= СтруктураДанных.УпрВыручка1 + ТаблицаУпрПоПроекту.Итог("УпрВыручка1");
		СтруктураДанных.УпрВыручка2		= СтруктураДанных.УпрВыручка2 + ТаблицаУпрПоПроекту.Итог("УпрВыручка2");
		СтруктураДанных.УпрВыручка		= СтруктураДанных.УпрВыручка + ТаблицаУпрПоПроекту.Итог("УпрВыручка");
		
		СтруктураДанных.УпрРасходы0		= СтруктураДанных.УпрРасходы0 + ТаблицаУпрПоПроекту.Итог("УпрРасходы0");
		СтруктураДанных.УпрРасходы1		= СтруктураДанных.УпрРасходы1 + ТаблицаУпрПоПроекту.Итог("УпрРасходы1");
		СтруктураДанных.УпрРасходы2		= СтруктураДанных.УпрРасходы2 + ТаблицаУпрПоПроекту.Итог("УпрРасходы2");
		СтруктураДанных.УпрРасходы		= СтруктураДанных.УпрРасходы + ТаблицаУпрПоПроекту.Итог("УпрРасходы");
		
		СтруктураДанных.УпрРасходы91_0	= СтруктураДанных.УпрРасходы91_0 + ТаблицаУпрПоПроекту.Итог("УпрРасходы91_0");
		СтруктураДанных.УпрРасходы91_1	= СтруктураДанных.УпрРасходы91_1 + ТаблицаУпрПоПроекту.Итог("УпрРасходы91_1");
		СтруктураДанных.УпрРасходы91_2	= СтруктураДанных.УпрРасходы91_2 + ТаблицаУпрПоПроекту.Итог("УпрРасходы91_2");
		СтруктураДанных.УпрРасходы91_	= СтруктураДанных.УпрРасходы91_ + ТаблицаУпрПоПроекту.Итог("УпрРасходы91_");
		
		// Прошлый год
		Строка0 = Таблица0.Найти(СтрокаПроекта.Проект, "Проект");
		Если Строка0 <> Неопределено Тогда
			СтруктураДанных.Выручка0	= Строка0.Выручка;
			СтруктураДанных.Расходы0	= Строка0.ФактЗатраты;
			СтруктураДанных.Резерв0		= Строка0.РезервПодУбыток;
			СтруктураДанных.АВыручка0	= Строка0.ВыручкаАктированная;
		КонецЕсли; 
		
		// Период с начала года, предыдущие месяца
		Если Таблица1 <> Неопределено Тогда
			Строка1 = Таблица1.Найти(СтрокаПроекта.Проект, "Проект");
			Если Строка1 <> Неопределено Тогда
				СтруктураДанных.Выручка1	= Строка1.Выручка;
				СтруктураДанных.Расходы1	= Строка1.ФактЗатраты;
				СтруктураДанных.Резерв1		= Строка1.РезервПодУбыток;
				СтруктураДанных.АВыручка1	= Строка1.ВыручкаАктированная;
			КонецЕсли; 
		КонецЕсли; 
		
		// Текущий период
		СтруктураДанных.Проект	= СтрокаПроекта.Проект;
		Если Строка <> Неопределено Тогда
			СтруктураДанных.Выручка	= Строка.Выручка;
			СтруктураДанных.Расходы	= Строка.ФактЗатраты;
			СтруктураДанных.Резерв	= Строка.РезервПодУбыток;
			СтруктураДанных.АВыручка= Строка.ВыручкаАктированная;
		КонецЕсли; 
		
		// Корректируем расчет выручки, затрат, т.к. считаются нарастающим итогом
		СтруктураДанных.Выручка 	= СтруктураДанных.Выручка  - СтруктураДанных.Выручка1;
		СтруктураДанных.Расходы 	= СтруктураДанных.Расходы  - СтруктураДанных.Расходы1;
		СтруктураДанных.Резерв 		= СтруктураДанных.Резерв   - СтруктураДанных.Резерв1;
		СтруктураДанных.АВыручка 	= СтруктураДанных.АВыручка - СтруктураДанных.АВыручка1;
		
		СтруктураДанных.Выручка1 	= СтруктураДанных.Выручка1  - СтруктураДанных.Выручка0;
		СтруктураДанных.Расходы1 	= СтруктураДанных.Расходы1  - СтруктураДанных.Расходы0;
		СтруктураДанных.Резерв1 	= СтруктураДанных.Резерв1   - СтруктураДанных.Резерв0;
		СтруктураДанных.АВыручка1 	= СтруктураДанных.АВыручка1 - СтруктураДанных.АВыручка0;
		
		// Рассчитываем итоги, прибыль
		Для каждого ИмяПостфикс Из МассивПостфиксов Цикл
			
			Если ИмяПостфикс = "Итого" Тогда
				Продолжить;
			КонецЕсли;
			
			// Расчетные показатели
			СтруктураДанных["Прибыль" + ИмяПостфикс] 	= СтруктураДанных["Выручка" + ИмяПостфикс] 		- СтруктураДанных["Расходы" + ИмяПостфикс];
			СтруктураДанных["УпрПрибыль" + ИмяПостфикс] = СтруктураДанных["УпрВыручка" + ИмяПостфикс] 	- СтруктураДанных["УпрРасходы" + ИмяПостфикс];
			СтруктураДанных["УпрПрибыльДоНалога" + ИмяПостфикс] = СтруктураДанных["УпрПрибыльДоНалога" + ИмяПостфикс] 
				+ СтруктураДанных["УпрПрибыль" + ИмяПостфикс] - СтруктураДанных["УпрРасходы91_" + ИмяПостфикс];
			
			// Считаем горизонтальный итог по строкам
			Для каждого ИмяПоказатель Из МассивПоказателей Цикл
				СтруктураДанных[ИмяПоказатель + "Итого"] = СтруктураДанных[ИмяПоказатель + "Итого"] + СтруктураДанных[ИмяПоказатель + ИмяПостфикс];	
			КонецЦикла; 
			
		КонецЦикла; 
		
		// Конвертируем знак расходов
		Для каждого Строка Из СтруктураДанных Цикл
			Если Найти(Строка.Ключ, "Расходы") <> 0 Тогда
				СтруктураДанных[Строка.Ключ] = -СтруктураДанных[Строка.Ключ];
			КонецЕсли;
		КонецЦикла; 
		
		Если ТабДок.ВысотаСтраницы <> 0 Тогда
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		Область.Параметры.Заполнить(СтруктураДанных);
		Область.Параметры.Организация = Организация;
		Область.Параметры.Период0 = Формат(НачалоГода(ПериодОтчета.ДатаНачала) - 1, "ДФ='yyyy'") 
			+ " до " + Формат(НачалоГода(ПериодОтчета.ДатаНачала), "ДФ=dd.MM.yyyy") + " факт";
		Область.Параметры.Период1 = Формат(НачалоГода(ПериодОтчета.ДатаНачала), "ДФ=MMMM") + "-" 
			+ Формат(НачалоМесяца(ПериодОтчета.ДатаНачала) - 1, "ДФ='MMMM yyyy'") + " факт";
		Область.Параметры.Период2 = Формат(ПериодОтчета.ДатаОкончания, "ДФ='MMMM yyyy'") + " (месяц закрытия)";
		Область.Параметры.Период3 = Формат(КонецМесяца(ПериодОтчета.ДатаОкончания) + 1, "ДФ=MMMM") + "-" 
			+ Формат(КонецГода(ПериодОтчета.ДатаОкончания), "ДФ='MMMM yyyy'") + " прогноз";
		Область.Параметры.Период4 = Формат(КонецГода(ПериодОтчета.ДатаОкончания) + 1, "ДФ='yyyy'");
		Область.Параметры.Сценарий 		= Сценарий;
		Область.Параметры.СценарийФакт 	= СценарийФакт;
		ТабДок.Вывести(Область);
		
	КонецЦикла; 

КонецПроцедуры

Функция УдалитьПослеСкобочек(Знач Имя)
	
	ПозСкобка = Найти(Имя, " (");
	Если ПозСкобка = 0 Тогда
		Возврат Имя;
	Иначе
		Возврат Лев(Имя, ПозСкобка - 1);
	КонецЕсли; 
	
КонецФункции 

&НаКлиенте
Процедура ПриОткрытии(Отказ)
ОбновитьСписокСценариев();
КонецПроцедуры
