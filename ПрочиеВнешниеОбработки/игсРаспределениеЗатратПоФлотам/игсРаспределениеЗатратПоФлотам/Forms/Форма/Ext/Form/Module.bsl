
#Область ОбработчикиСобытийФормы

&НаКлиенте
// Заполняет Дату и Организацию из ОперацииБух
Процедура ОперацияБухПриИзменении(Элемент)
	
	Объект.Дата			= Объект.ОперацияБух.Дата;
	Объект.Организация	= Объект.ОперацияБух.Организация;
	
КонецПроцедуры

#КонецОбласти 


#Область ОбработчикиКомандФормы

&НаКлиенте
// Содержит проверки и вызывает ВыполнитьКомандуНаСервере()
Процедура ВыполнитьКоманду(Команда) 
	
	Если НЕ ЗначениеЗаполнено(Объект.ОперацияБух) Тогда 
		
		Если НЕ ЗначениеЗаполнено(Объект.Дата) Тогда
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(
			"Если Вы не указали документ Операции, то, пожалуйста, укажите дату!"
			, , "Дата", "Объект",); 
			
			Возврат;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(
			"Если Вы не указали документ Операции, то, пожалуйста, укажите Организацию!"
			, , "Организация", "Объект",);
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УказанаОперация = ЗначениеЗаполнено(Объект.ОперацияБух);
	
	ВыполнитьКомандуНаСервере(УказанаОперация);
		
КонецПроцедуры

&НаСервере
// Создает движения по алгоритму распределения
Процедура ВыполнитьКомандуНаСервере(ОперацияБухОпределена)
	
	// Документ, на который кладутся движения
	Если ОперацияБухОпределена Тогда 
		
		// Используется выбранный документ
		ОбъектОперации = Объект.ОперацияБух.ПолучитьОбъект();
		
		// Движения очищаются
		игсВыручкаИЗатратыПоФлотам = ОбъектОперации.Движения.игсВыручкаИЗатратыПоФлотам;
		игсВыручкаИЗатратыПоФлотам.Прочитать();
		игсВыручкаИЗатратыПоФлотам.Очистить();

	Иначе
		
		// Создается новый документ
		ОбъектОперации = Документы.ОперацияБух.СоздатьДокумент();
		ОбъектОперации.Дата			= Объект.Дата;
		ОбъектОперации.Организация	= Объект.Организация;
		ОбъектОперации.Записать(РежимЗаписиДокумента.Запись);
		
		Объект.ОперацияБух = ОбъектОперации.Ссылка;
		
	КонецЕсли;
	
	ОбъектОперации.Движения.игсВыручкаИЗатратыПоФлотам.Записывать = Истина;
	
	// Параметры для запросов      
	Дата = ОбъектОперации.Дата;
	
	НачалоПериода		= НачалоМесяца(Дата);
	КонецПериода		= КонецМесяца(Дата);
	КонецПериодаГраница	= Новый Граница(КонецМесяца(ОбъектОперации.Дата), ВидГраницы.Включая);
	
	КонецПрошлыйМесяц	= НачалоПериода - 1;
	НачалоПрошлыйМесяц	= НачалоМесяца(КонецПрошлыйМесяц);
	
	Счет2001 = ПланыСчетов.Хозрасчетный.ОсновноеПроизводство;
	Счет9001 = ПланыСчетов.Хозрасчетный.Выручка;
	
	ПВХНоменклатурныеГруппы = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы;
		
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстОсновногоЗапроса();
	
	Запрос.УстановитьПараметр("Дата", 							Дата);
	Запрос.УстановитьПараметр("Организация", 					ОбъектОперации.Организация);

	Запрос.УстановитьПараметр("НачалоПериода", 					НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", 					КонецПериода);

	Запрос.УстановитьПараметр("НачалоПериода_1",				НачалоПрошлыйМесяц);
	Запрос.УстановитьПараметр("КонецПериода_1", 				КонецПрошлыйМесяц);
	Запрос.УстановитьПараметр("КонецПериодаГраница", 			КонецПериодаГраница);
	
	Запрос.УстановитьПараметр("Счет2001",						Счет2001);
	Запрос.УстановитьПараметр("Счет9001",						Счет9001);
	
	Запрос.УстановитьПараметр("СубконтоНоменлатурныеГруппы",	ПВХНоменклатурныеГруппы);
	
	Результат = Запрос.ВыполнитьПакет();
	
	// К распределению
	ВыборкаНГ = Результат[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	// База распределения "ЭтапыДежурство" - текущий период
	БазаРаспределения = Результат[2].Выгрузить();
	БазаРаспределения.Индексы.Добавить("ТранспортноеСредство");
	БазаРаспределения.Индексы.Добавить("БуроваяУстановка");
	
	// База распределения "Этапы" - за весь период
	БазаРаспределенияЭтапы = Результат[3].Выгрузить();
	БазаРаспределенияЭтапы.Индексы.Добавить("НоменклатурнаяГруппа");
	
	// База распределения "ЭтапыДежурство" - прошлый месяц
	БазаРаспределенияДежурство = Результат[4].Выгрузить();
	БазаРаспределенияДежурство.Индексы.Добавить("ТранспортноеСредство"); // Номенклатурная группа
	БазаРаспределенияДежурство.Индексы.Добавить("БуроваяУстановка");	// Буровая установка
	
	// Определение состава флота
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаСоставыФлотов();
	
	Запрос.УстановитьПараметр("КонецТекущегоПериода", КонецПериода); 
			
	СоставФлота = Запрос.Выполнить().Выгрузить();
			
   	// ТампонажныйФлот - определение
	ТампонажныйФлотНастройка = ПредопределенноеЗначение("ПланВидовХарактеристик.игсНастройкиМеханизмов.ПроектГорныйТампонажныйФлот");
	ТампонажныйФлот	= игсНастройкиМеханизмовВызовСервера.ПолучитьЗначениеНастройки(ТампонажныйФлотНастройка, ОбъектОперации.Организация);  
	
	Если НЕ ЗначениеЗаполнено(ТампонажныйФлот) Тогда
		ОбщегоНазначения.СообщитьПользователю(
		"Тампонажный флот необходимо указать в Настройках Механизмов!");
		Возврат;
	КонецЕсли;
	
	// Определение базы распределения для каждого конкретного случая
	КоличествоСтрокДляРаспределения = ВыборкаНГ.Количество();
	СчетчикВыборки = 1;
	Пока ВыборкаНГ.Следующий() Цикл
		
		СчетчикВыборки = СчетчикВыборки + 1;
		
		// Это этап работ, распределяем его по основной справке ПТО
		РаспределятьНаТС = ВыборкаНГ.ЭтоЭтапРабот;
		РаспределятьНаВсе = Ложь;
		
		Если НЕ ЗначениеЗаполнено(ВыборкаНГ.НоменклатурнаяГруппа)
			И НЕ ЗначениеЗаполнено(ВыборкаНГ.ТранспортноеСредство) Тогда
		
			БазаРаспределенияПоНГ 	= БазаРаспределенияЭтапы.Скопировать(Новый Структура("ОтчетныйПериод", Истина), 
			"ТранспортноеСредство, НоменклатурнаяГруппа, ПроектНГ, КалендарныхДней, ДатаНачала");
			
			Если БазаРаспределенияПоНГ.Количество() <> 0 Тогда
				ИсключениеИзРаспределения = БазаРаспределенияПоНГ.НайтиСтроки(Новый Структура("ТранспортноеСредство", ТампонажныйФлот));
				Для каждого СтрокаТФ Из ИсключениеИзРаспределения Цикл
					БазаРаспределенияПоНГ.Удалить(СтрокаТФ);
				КонецЦикла; 
			КонецЕсли;

			РаспределятьНаТС 		= БазаРаспределенияПоНГ.Количество() <> 0;
			РаспределятьНаВсе 		= Истина;
				
		ИначеЕсли РаспределятьНаТС = ИСТИНА Тогда
			// Ищем в этапах работ, если это этап, сначала в текущем отчетном периоде, затем по всем справкам
			БазаРаспределенияПоНГ = БазаРаспределенияЭтапы.Скопировать(Новый Структура("НоменклатурнаяГруппа, ОтчетныйПериод", ВыборкаНГ.НоменклатурнаяГруппа, Истина), "ТранспортноеСредство, НоменклатурнаяГруппа, ПроектНГ, КалендарныхДней, ДатаНачала"); 
			Если БазаРаспределенияПоНГ.Количество() = 0 Тогда
				БазаРаспределенияПоНГ = БазаРаспределенияЭтапы.Скопировать(Новый Структура("НоменклатурнаяГруппа", ВыборкаНГ.НоменклатурнаяГруппа), "ТранспортноеСредство, НоменклатурнаяГруппа, ПроектНГ, КалендарныхДней, ДатаНачала"); 
			КонецЕсли;
		Иначе
			// Ищем в дежурстве
			БазаРаспределенияПоНГ = БазаРаспределения.Скопировать(Новый Структура("ТранспортноеСредство", ВыборкаНГ.НоменклатурнаяГруппа), "Проект, КалендарныхДней"); 
			Если БазаРаспределенияПоНГ.Количество() = 0 Тогда
				БазаРаспределенияПоНГ = БазаРаспределения.Скопировать(Новый Структура("БуроваяУстановка", ВыборкаНГ.ТранспортноеСредство), "Проект, КалендарныхДней");
			КонецЕсли;
			
			// Если в дежурстве нет данных распределяем на основании данных этапов, сначала текущего отчетного периода, затем по этапам за все периоды
			Если БазаРаспределенияПоНГ.Количество() = 0 Тогда
				БазаРаспределенияПоНГ = БазаРаспределенияЭтапы.Скопировать(Новый Структура("ТранспортноеСредство, ОтчетныйПериод", ВыборкаНГ.ТранспортноеСредство, Истина), "ТранспортноеСредство, НоменклатурнаяГруппа, ДатаНачала, ПроектНГ, КалендарныхДней");
				РаспределятьНаТС = БазаРаспределенияПоНГ.Количество() <> 0;
			КонецЕсли; 
			
			// Если в дежурстве нет данных распределяем на основании данных этапов, сначала текущего отчетного периода, затем по этапам за все периоды
			БазаРаспределенияПоНГ = БазаРаспределенияЭтапы.Скопировать(Новый Структура("ТранспортноеСредство, ОтчетныйПериод", ВыборкаНГ.ТранспортноеСредство, Истина), "ТранспортноеСредство, НоменклатурнаяГруппа, ДатаНачала, ПроектНГ, КалендарныхДней");
			РаспределятьНаТС = БазаРаспределенияПоНГ.Количество() <> 0;
			
			// Ищем в дежурстве
			Если БазаРаспределенияПоНГ.Количество() = 0 Тогда
				БазаРаспределенияПоНГ = БазаРаспределения.Скопировать(Новый Структура("ТранспортноеСредство", ВыборкаНГ.НоменклатурнаяГруппа), "Проект, КалендарныхДней"); 
				Если БазаРаспределенияПоНГ.Количество() = 0 Тогда
					БазаРаспределенияПоНГ = БазаРаспределения.Скопировать(Новый Структура("БуроваяУстановка", ВыборкаНГ.ТранспортноеСредство), "Проект, КалендарныхДней");
				КонецЕсли;
			КонецЕсли; 
			
			// Если в дежурстве нет данных распределяем на основании данных этапов, сначала текущего отчетного периода, затем по этапам за все периоды
			Если БазаРаспределенияПоНГ.Количество() = 0 Тогда
				БазаРаспределенияПоНГ = БазаРаспределенияЭтапы.Скопировать(Новый Структура("ТранспортноеСредство", ВыборкаНГ.ТранспортноеСредство), "ТранспортноеСредство, НоменклатурнаяГруппа, ДатаНачала, ПроектНГ, КалендарныхДней");
				РаспределятьНаТС = БазаРаспределенияПоНГ.Количество() <> 0;
			КонецЕсли; 
			
			// Если нет в этапах всех периодов и дежурстве текущего периода, то ищем в дежурстве за все периоды
			Если БазаРаспределенияПоНГ.Количество() = 0 Тогда
				БазаРаспределенияПоНГ = БазаРаспределенияДежурство.Скопировать(Новый Структура("ТранспортноеСредство", ВыборкаНГ.НоменклатурнаяГруппа), "Проект, КалендарныхДней"); 
				Если БазаРаспределенияПоНГ.Количество() = 0 Тогда
					БазаРаспределенияПоНГ = БазаРаспределенияДежурство.Скопировать(Новый Структура("БуроваяУстановка", ВыборкаНГ.ТранспортноеСредство), "Проект, КалендарныхДней");
				КонецЕсли;
			КонецЕсли; 
			
			
			// Если это т.с. и по т.с. не найдена база, то распределяем на все этапы
			Если БазаРаспределенияПоНГ.Количество() = 0 Тогда
								
				БазаРаспределенияПоНГ 	= БазаРаспределенияЭтапы.Скопировать(Новый Структура("ОтчетныйПериод", Истина), "ТранспортноеСредство, НоменклатурнаяГруппа, ДатаНачала, ПроектНГ, КалендарныхДней");
				РаспределятьНаТС 		= БазаРаспределенияПоНГ.Количество() <> 0;
				
				Если РаспределятьНаТС Тогда
					ИсключениеИзРаспределения = БазаРаспределенияПоНГ.НайтиСтроки(Новый Структура("ТранспортноеСредство", ТампонажныйФлот));
					Для каждого СтрокаТФ Из ИсключениеИзРаспределения Цикл
						БазаРаспределенияПоНГ.Удалить(СтрокаТФ);
					КонецЦикла; 
				КонецЕсли; 
				
				// Если это т.с. не указанные в этапах работ, в дежурке и в этапах работ нет информации, то распределяем 
				// по дежурной технике
				Если РаспределятьНаТС = ЛОЖЬ Тогда
					БазаРаспределенияПоНГ = БазаРаспределения.Скопировать(, "Проект, КалендарныхДней");
				КонецЕсли; 
				
			КонецЕсли; 
			
		КонецЕсли; 
		
		// Если базу не нашли ничего не распределяем
		Если БазаРаспределенияПоНГ.Количество() = 0 Тогда
			
			Выборка = ВыборкаНГ.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				Движение = ОбъектОперации.Движения.игсВыручкаИЗатратыПоФлотам.Добавить();
				ЗаполнитьЗначенияСвойств(Движение, Выборка);
				Движение.Распределено = Выборка.КРаспределению;
					
			КонецЦикла;
			
			Продолжить;
			
		КонецЕсли;
		
		// Если есть база получаем коэффициенты распределения, т.к. в общем случае
		// ТС может быть использовано на разных проектах
		Коэффициенты = БазаРаспределенияПоНГ.ВыгрузитьКолонку("КалендарныхДней");
		
		Выборка = ВыборкаНГ.Выбрать();
		Пока Выборка.Следующий() Цикл
		
			МассивРаспределения = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(Выборка.КРаспределению, Коэффициенты);
			
			Счетчик = 0;
			
			// По сформированной базе коэффициентов формируем распределение
			Для каждого СтрокаБазы Из БазаРаспределенияПоНГ Цикл
				
  				Движение = ОбъектОперации.Движения.игсВыручкаИЗатратыПоФлотам.Добавить();
				ЗаполнитьЗначенияСвойств(Движение, Выборка);
				
				// Определяем флот при распределении на этап работ
				Если Выборка.ЭтоЭтапРабот ИЛИ РаспределятьНаВсе = ИСТИНА 
						ИЛИ РаспределятьНаТС = ИСТИНА Тогда
						
						ПринадлежностьКФлоту = ПолучитьПринадлежностьКФлоту(СоставФлота, 
							СтрокаБазы.ТранспортноеСредство, 
							НачалоДня(СтрокаБазы.ДатаНачала));
						
						Если ЗначениеЗаполнено(ПринадлежностьКФлоту) Тогда
							Движение.Флот = ПринадлежностьКФлоту;	
						КонецЕсли;
						
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(Движение, СтрокаБазы, ?(РаспределятьНаТС = ИСТИНА, "ТранспортноеСредство, НоменклатурнаяГруппа", "Проект"));
				Движение.Распределено = МассивРаспределения[Счетчик];
				Если Выборка.ЭтоЭтапРабот 
					И НЕ ЗначениеЗаполнено(Движение.Проект) Тогда
					Движение.Проект = Выборка.ПроектНГ;
				ИначеЕсли НЕ ЗначениеЗаполнено(Движение.Проект) 
					И РаспределятьНаТС Тогда
					Движение.Проект = СтрокаБазы.ПроектНГ;
				КонецЕсли; 
				
				Счетчик = Счетчик + 1;
				
			КонецЦикла; 
		
		КонецЦикла; 
		
	КонецЦикла;	
	
	// Запись движений
	ОбъектОперации.Движения.игсВыручкаИЗатратыПоФлотам.Записать();
	
	ОбщегоНазначения.СообщитьПользователю(
	СтрШаблон("Движения успешно записаны в %1 документ: %2.", 
	?(ОперацияБухОпределена, "выбранный", "созданный"),
	Строка(ОбъектОперации)));
	
КонецПроцедуры

#КонецОбласти
   

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
// Возвращает принадлежность ТС к Флоту актуальную на ДатуСреза
Функция ПолучитьПринадлежностьКФлоту(СоставФлота, ТранспортноеСредство, ДатаСреза)
		
	// Поиск актуальной принадлежности к СоставуФлота с конца
	// (в запросе обратный порядок сортировки по периоду)
	Для Каждого СтрокаСоставФлота Из СоставФлота Цикл 
		
		Если СтрокаСоставФлота.Период <= ДатаСреза // Дата среза должна быть старше
			И СтрокаСоставФлота.ТранспортноеСредство = ТранспортноеСредство 
			Тогда
			
			Возврат СтрокаСоставФлота.Флот; 
			
		КонецЕсли;	
	КонецЦикла;

	Возврат Неопределено;
	
КонецФункции

&НаСервереБезКонтекста
// Основной запрос (ЗатратыВыручка к распределению и БазыРаспределения) 
Функция ПолучитьТекстОсновногоЗапроса()

	Текст =
	"ВЫБРАТЬ
	|	&Дата КАК Период,
	|	ХозрасчетныйОборотыДтКт.Организация КАК Организация,
	|	ХозрасчетныйОборотыДтКт.СчетДт КАК СчетЗатрат,
	|	ХозрасчетныйОборотыДтКт.ПодразделениеДт КАК ПодразделениеОрганизации,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОборотыДтКт.СубконтоДт1 = ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
	|				И НЕ игсЗатратыКРаспределениюПоПроизводственнойПрограмме.ОбъектРаспределения ЕСТЬ NULL
	|			ТОГДА игсЗатратыКРаспределениюПоПроизводственнойПрограмме.ОбъектРаспределения.НоменклатурнаяГруппа
	|		ИНАЧЕ ХозрасчетныйОборотыДтКт.СубконтоДт1
	|	КОНЕЦ КАК НоменклатурнаяГруппа,
	|	игсЗатратыКРаспределениюПоПроизводственнойПрограмме.ОбъектРаспределения КАК ТранспортноеСредство,
	|	игсЗатратыКРаспределениюПоПроизводственнойПрограмме.СтатьяЗатрат КАК СтатьяЗатрат,
	|	ХозрасчетныйОборотыДтКт.Регистратор КАК ДокументЗатрат,
	|	ХозрасчетныйОборотыДтКт.СчетКт КАК КорСчет,
	|	ХозрасчетныйОборотыДтКт.СубконтоКт1 КАК КорСубконто1,
	|	ХозрасчетныйОборотыДтКт.СубконтоКт2 КАК КорСубконто2,
	|	ХозрасчетныйОборотыДтКт.СубконтоКт3 КАК КорСубконто3,
	|	ХозрасчетныйОборотыДтКт.СуммаОборот КАК КРаспределению
	|ПОМЕСТИТЬ Затраты
	|ИЗ
	|	РегистрНакопления.игсЗатратыКРаспределениюПоПроизводственнойПрограмме КАК игсЗатратыКРаспределениюПоПроизводственнойПрограмме
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|				&НачалоПериода,
	|				&КонецПериодаГраница,
	|				Запись,
	|				СчетДт = &Счет2001,
	|				,
	|				,
	|				,
	|				Организация = &Организация
	|					И СубконтоДт1 = ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)) КАК ХозрасчетныйОборотыДтКт
	|		ПО игсЗатратыКРаспределениюПоПроизводственнойПрограмме.Регистратор = ХозрасчетныйОборотыДтКт.Регистратор
	|			И игсЗатратыКРаспределениюПоПроизводственнойПрограмме.Позиция = ХозрасчетныйОборотыДтКт.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Затраты.Период КАК Период,
	|	Затраты.Организация КАК Организация,
	|	Затраты.СчетЗатрат КАК СчетЗатрат,
	|	Затраты.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	Затраты.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	Затраты.ТранспортноеСредство КАК ТранспортноеСредство,
	|	Затраты.СтатьяЗатрат КАК СтатьяЗатрат,
	|	Затраты.ДокументЗатрат КАК ПервичныйДокумент,
	|	Затраты.КорСчет КАК КорСчет,
	|	Затраты.КорСубконто1 КАК КорСубконто1,
	|	Затраты.КорСубконто2 КАК КорСубконто2,
	|	Затраты.КорСубконто3 КАК КорСубконто3,
	|	Затраты.КРаспределению КАК КРаспределению,
	|	ВЫБОР
	|		КОГДА НоменклатурныеГруппы.Наименование ПОДОБНО ""% # %""
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоЭтапРабот,
	|	ВЫБОР
	|		КОГДА НоменклатурныеГруппы.Наименование ПОДОБНО ""% # %""
	|			ТОГДА НоменклатурныеГруппы.Родитель.Родитель.Родитель.Родитель
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
	|	КОНЕЦ КАК ПроектНГ,
	|	ИСТИНА КАК ЭтоЗатраты
	|ИЗ
	|	Затраты КАК Затраты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НоменклатурныеГруппы КАК НоменклатурныеГруппы
	|		ПО Затраты.НоменклатурнаяГруппа = НоменклатурныеГруппы.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.игсБуровыеУстановки КАК игсБуровыеУстановки
	|		ПО Затраты.НоменклатурнаяГруппа = игсБуровыеУстановки.НоменклатурнаяГруппа
	|			И (игсБуровыеУстановки.НоменклатурнаяГруппа <> ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Дата,
	|	ХозрасчетныйОборотыДтКт.Организация,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	ХозрасчетныйОборотыДтКт.СубконтоКт1,
	|	игсБуровыеУстановки.Ссылка,
	|	НЕОПРЕДЕЛЕНО,
	|	ХозрасчетныйОборотыДтКт.Регистратор,
	|	ХозрасчетныйОборотыДтКт.СчетДт,
	|	ХозрасчетныйОборотыДтКт.СубконтоДт1,
	|	ХозрасчетныйОборотыДтКт.СубконтоДт2,
	|	ХозрасчетныйОборотыДтКт.СубконтоДт3,
	|	ХозрасчетныйОборотыДтКт.СуммаОборот,
	|	ВЫБОР
	|		КОГДА НоменклатурныеГруппы.Наименование ПОДОБНО ""% # %""
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НоменклатурныеГруппы.Наименование ПОДОБНО ""% # %""
	|			ТОГДА НоменклатурныеГруппы.Родитель.Родитель.Родитель.Родитель
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
	|	КОНЕЦ,
	|	ЛОЖЬ
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачалоПериода, &КонецПериодаГраница, Регистратор, , , СчетКт В ИЕРАРХИИ (&Счет9001), &СубконтоНоменлатурныеГруппы, Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НоменклатурныеГруппы КАК НоменклатурныеГруппы
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.игсБуровыеУстановки КАК игсБуровыеУстановки
	|			ПО НоменклатурныеГруппы.Ссылка = игсБуровыеУстановки.НоменклатурнаяГруппа
	|				И (игсБуровыеУстановки.НоменклатурнаяГруппа <> ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка))
	|		ПО ХозрасчетныйОборотыДтКт.СубконтоКт1 = НоменклатурныеГруппы.Ссылка
	|ИТОГИ
	|	МАКСИМУМ(ТранспортноеСредство),
	|	МАКСИМУМ(ЭтоЭтапРабот)
	|ПО
	|	НоменклатурнаяГруппа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	игсСправкаПТОЭтапыДежурство.ТранспортноеСредство КАК ТранспортноеСредство,
	|	игсСправкаПТОЭтапыДежурство.Проект КАК Проект,
	|	игсБуровыеУстановки.Ссылка КАК БуроваяУстановка,
	|	РАЗНОСТЬДАТ(игсСправкаПТОЭтапыДежурство.ДатаНачала, игсСправкаПТОЭтапыДежурство.ДатаОкончания, ДЕНЬ) КАК КалендарныхДней
	|ИЗ
	|	Документ.игсСправкаПТО.ЭтапыДежурство КАК игсСправкаПТОЭтапыДежурство
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.игсСправкаПТО КАК игсСправкаПТО
	|		ПО игсСправкаПТОЭтапыДежурство.Ссылка = игсСправкаПТО.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.игсБуровыеУстановки КАК игсБуровыеУстановки
	|		ПО игсСправкаПТОЭтапыДежурство.ТранспортноеСредство = игсБуровыеУстановки.НоменклатурнаяГруппа
	|ГДЕ
	|	игсСправкаПТО.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И игсСправкаПТО.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	игсСправкаПТОЭтапы.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	игсСправкаПТОЭтапы.БуроваяУстановка КАК ТранспортноеСредство,
	|	РАЗНОСТЬДАТ(игсСправкаПТОЭтапы.ДатаНачала, ВЫБОР
	|			КОГДА игсСправкаПТОЭтапы.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(игсСправкаПТО.Период, МЕСЯЦ), ДЕНЬ, 1)
	|			ИНАЧЕ игсСправкаПТОЭтапы.ДатаОкончания
	|		КОНЕЦ, ДЕНЬ) КАК КалендарныхДней,
	|	НоменклатурныеГруппы.Родитель.Родитель.Родитель.Родитель КАК ПроектНГ,
	|	игсСправкаПТОЭтапы.ДатаНачала КАК ДатаНачала,
	|	ВЫБОР
	|		КОГДА игсСправкаПТО.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОтчетныйПериод
	|ИЗ
	|	Документ.игсСправкаПТО.Этапы КАК игсСправкаПТОЭтапы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.игсСправкаПТО КАК игсСправкаПТО
	|		ПО игсСправкаПТОЭтапы.Ссылка = игсСправкаПТО.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НоменклатурныеГруппы КАК НоменклатурныеГруппы
	|		ПО игсСправкаПТОЭтапы.НоменклатурнаяГруппа = НоменклатурныеГруппы.Ссылка
	|ГДЕ
	|	игсСправкаПТО.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	игсСправкаПТОЭтапыДежурство.ТранспортноеСредство КАК ТранспортноеСредство,
	|	игсСправкаПТОЭтапыДежурство.Проект КАК Проект,
	|	игсБуровыеУстановки.Ссылка КАК БуроваяУстановка,
	|	РАЗНОСТЬДАТ(игсСправкаПТОЭтапыДежурство.ДатаНачала, игсСправкаПТОЭтапыДежурство.ДатаОкончания, ДЕНЬ) КАК КалендарныхДней
	|ИЗ
	|	Документ.игсСправкаПТО.ЭтапыДежурство КАК игсСправкаПТОЭтапыДежурство
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.игсСправкаПТО КАК игсСправкаПТО
	|		ПО игсСправкаПТОЭтапыДежурство.Ссылка = игсСправкаПТО.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.игсБуровыеУстановки КАК игсБуровыеУстановки
	|		ПО игсСправкаПТОЭтапыДежурство.ТранспортноеСредство = игсБуровыеУстановки.НоменклатурнаяГруппа
	|ГДЕ
	|	игсСправкаПТО.Период МЕЖДУ &НачалоПериода_1 И &КонецПериода_1
	|	И игсСправкаПТО.Проведен";
	
	Возврат Текст;
			
КонецФункции

&НаСервереБезКонтекста
// Запрос со срезом состава Флота на дату
Функция ПолучитьТекстЗапросаСоставыФлотов()

	Текст = 
	"ВЫБРАТЬ
	|	игсСоставФлотаСрезПоследних.Период КАК Период,
	|	игсИзменениеСоставаФлотаСостав.ТранспортноеСредство КАК ТранспортноеСредство,
	|	игсСоставФлотаСрезПоследних.Флот КАК Флот
	|ИЗ
	|	РегистрСведений.игсСоставФлота.СрезПоследних(&КонецТекущегоПериода, ) КАК игсСоставФлотаСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.игсИзменениеСоставаФлота.Состав КАК игсИзменениеСоставаФлотаСостав
	|		ПО игсСоставФлотаСрезПоследних.СоставФлота = игсИзменениеСоставаФлотаСостав.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	игсСоставФлотаСрезПоследних.Период УБЫВ";
	
	Возврат Текст;
	
КонецФункции

#КонецОбласти