Перем игсИнтеграцияГазпромБанкHTTPСервисСерверМодуль;

#Область ПрограммныйИнтерфейс

// <ИГС> ПР Потылицын Г.С. #0019 {
Функция СведенияОВнешнейОбработке() Экспорт
	
	// Заполнение ПараметровРегистрации
	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке("2.2.2.1");
	ПараметрыРегистрации.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка();
	ПараметрыРегистрации.БезопасныйРежим = Ложь;
	ПараметрыРегистрации.Наименование = "Обновить статусы документов ""ГазпромБанк""";
	ПараметрыРегистрации.Версия = "1.0";
	ПараметрыРегистрации.Информация = "Обработка перенесена из УСО и позволяет загружать
	|сопроводительные документы (Платежные Поручения) на портал ""ГазпромБанк"" и обновлять их статус.
	|
	|
	|Автор: <ИГС> ПР Потылицын Г.С. #0019, 01.07.2025";
	
	// Добавление команды 
	НоваяКоманда = ПараметрыРегистрации.Команды.Добавить();
	НоваяКоманда.Представление = "Открыть форму";
	НоваяКоманда.Идентификатор = НоваяКоманда.Представление;
	НоваяКоманда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	
	Возврат ПараметрыРегистрации;
	
КонецФункции
// } </ИГС>

#КонецОбласти


Процедура ОбновитьСтатусыДокументов() Экспорт
	
	Лог = НовыйЛог();
	
	Логирование(Лог,
		НСтр("ru='Старт'")
	);	
	
	ОперацияИнтеграции
		= Перечисления.игсОперацииИнтеграцийHTTP.НовыйОперацияИнтеграции();
	ОперацияИнтеграции.Операция
		= Перечисления.игсОперацииИнтеграцийHTTP.СтатусыДокументовГазпром;
		
	СобытиеЖР = СобытиеОбновлениеСтатусовЖурналаРегистрации();	
	
	Логирование(Лог,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Идентификатор сессии в журнале HTTP запросов - %1'"),
			ОперацияИнтеграции.IDСессии
		)	
	);
	
	Логирование(Лог,
		НСтр("ru='Авторизация сессии'")
	);
	
	РезультатАвторизации = игсИнтеграцияГазпромБанкHTTPСервисСервер.Авторизация(ОперацияИнтеграции);
	
	Если РезультатАвторизации.КодСостояния <> 200 Тогда
		ТекстОшибки = НСтр("ru='Ошибка авторизации на портале банка ""Газпром""'");
		УведомитьОбОшибке(ТекстОшибки, СобытиеЖР);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;	
	
	Логирование(Лог,
		НСтр("ru='Получение списка платежей'")
	);
	
	РезультатЗапроса = игсИнтеграцияГазпромБанкHTTPСервисСервер.СписокПлатежей(
		РезультатАвторизации.JWTТокен,
		ОперацияИнтеграции
	);
	
	Если РезультатЗапроса.КодСостояния <> 200 Тогда
		ТекстОшибки = НСтр("ru='Ошибка получения списка платежей на портале банка ""Газпром""'");
		УведомитьОбОшибке(ТекстОшибки, СобытиеЖР);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;	
	
	Логирование(Лог,
		НСтр("ru='Обработка списка платежей'")
	);
	
	РезультатОбработкиСтатусов = ОбработатьСтатусыДокументов(РезультатЗапроса.РезультатОтвета, Лог);
	Если РезультатОбработкиСтатусов.Отказ Тогда
		УведомитьОбОшибке(РезультатОбработкиСтатусов.Ошибки, СобытиеЖР); 
	КонецЕсли;	
	
	Логирование(Лог,
		НСтр("ru='Завершение сессии'")
	);
	
	игсИнтеграцияГазпромБанкHTTPСервисСервер.ЗавершитьСессию(
		РезультатАвторизации.JWTТокен,
		ОперацияИнтеграции
	);
	
	Логирование(Лог,
		НСтр("ru='Завершение'"),
		Ложь
	);
	
	ЗаписатьЛог(Лог, СобытиеЖР);
	
КонецПроцедуры

Процедура ЗагрузитьСопроводительныеДокументы() Экспорт
	
	Лог = НовыйЛог();
	
	Логирование(Лог,
		НСтр("ru='Старт'")
	);	
	
	ОперацияИнтеграции
		= Перечисления.игсОперацииИнтеграцийHTTP.НовыйОперацияИнтеграции();
	ОперацияИнтеграции.Операция
		= Перечисления.игсОперацииИнтеграцийHTTP.ЗагрузкаСопроводительныхДокументовГазпром;
		
	СобытиеЖР = СобытиеЗагрузкаДокументовЖурналаРегистрации();	
	
	Логирование(Лог,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Идентификатор сессии в журнале HTTP запросов - %1'"),
			ОперацияИнтеграции.IDСессии
		)	
	);
	
	Логирование(Лог,
		НСтр("ru='Авторизация сессии'")
	);
	
	РезультатАвторизации = игсИнтеграцияГазпромБанкHTTPСервисСервер.Авторизация(ОперацияИнтеграции);
	
	Если РезультатАвторизации.КодСостояния <> 200 Тогда
		ТекстОшибки = НСтр("ru='Ошибка авторизации на портале банка ""Газпром""'");
		УведомитьОбОшибке(ТекстОшибки, СобытиеЖР);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;	
	
	РезультатЗапроса = игсИнтеграцияГазпромБанкHTTPСервисСервер.СписокПлатежей(
		РезультатАвторизации.JWTТокен,
		ОперацияИнтеграции
	);
	
	Если РезультатЗапроса.КодСостояния <> 200 Тогда
		ТекстОшибки = НСтр("ru='Ошибка получения списка платежей на портале банка ""Газпром""'");
		УведомитьОбОшибке(ТекстОшибки, СобытиеЖР);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;	
	
	РезультатДокументыКВыгрузке = ДокументыВложенияВСтатусе_1_НаНаРассмотрении(РезультатЗапроса.РезультатОтвета, Лог);
	Если РезультатДокументыКВыгрузке.Отказ Тогда
		УведомитьОбОшибке(РезультатДокументыКВыгрузке.Ошибки, СобытиеЖР); 
	КонецЕсли;	
	
	Логирование(Лог,
		НСтр("ru='Выгрузка обосновывающх документов'")
	);
	
	ЕстьОшибки = Ложь;
	Ошибки = Новый Массив;
	Для каждого ЭлементКоллекции Из РезультатДокументыКВыгрузке.ДокументыКВыгрузке Цикл
		
		Идентификатор = ЭлементКоллекции.Ключ;
		ПараметрыВыгрузки = ЭлементКоллекции.Значение;		
		
		Логирование(Лог,
			НСтр("ru='Получение CSRF токена'")
		);
		
		РезультатЗапросаCSRFT = игсИнтеграцияГазпромБанкHTTPСервисСервер.CSRFТокен(
			РезультатАвторизации.JWTТокен,
			ОперацияИнтеграции
		);
		
		Если Не (РезультатЗапросаCSRFT.КодСостояния = 200
			И ЗначениеЗаполнено(РезультатЗапросаCSRFT.CSRFТокен)) Тогда
			ЕстьОшибки = Истина;
			Ошибки.Добавить(НСтр("ru='Ошибка получения CSRF токена на портале банка ""Газпром""'"));
			Продолжить;
		КонецЕсли;	
		
		РезультатЗагрузкиФайла = игсИнтеграцияГазпромБанкHTTPСервисСервер.ЗагрузитьОбосновывающийДокумент(
			РезультатАвторизации.JWTТокен,
			РезультатЗапросаCSRFT.CSRFТокен,
			ОперацияИнтеграции,
			Идентификатор,
			ПараметрыВыгрузки.ФайлыВложения
		);	
		
		ОшибкаОтветСервиса =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Код ответа %1'"),
				РезультатЗагрузкиФайла.КодСостояния
			);
		Если РезультатЗагрузкиФайла.КодСостояния = 200 Тогда	
			ОшибкаОтветСервиса = РезультатЗагрузкиФайла.РезультатОтвета["ERROR"];
		КонецЕсли;	
		Если Не (РезультатЗагрузкиФайла.КодСостояния = 200 И ОшибкаОтветСервиса = Неопределено) Тогда
			ЕстьОшибки = Истина;
			Ошибки.Добавить(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(			
					НСтр("ru='Ошибка загрузки файлов на портал банка ""Газпром"" по %1
						|Ошибка: %2'"),
					ПараметрыВыгрузки.ПлатежноеПоручение,
					ОшибкаОтветСервиса
				)	
			);
			Продолжить;
		КонецЕсли;	
		
		РезультатОтметки = ОтметкаДокументВыгружен(ПараметрыВыгрузки.ПлатежноеПоручение, Лог);
		Если РезультатОтметки.Отказ Тогда
			ЕстьОшибки = Истина;
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Ошибки, РезультатОтметки.Ошибки);
		КонецЕсли; 
		
	КонецЦикла;
	
	Если ЕстьОшибки И Ошибки.Количество() > 0 Тогда
		УведомитьОбОшибке(Ошибки, СобытиеЖР);
	КонецЕсли;	
	
	Логирование(Лог,
		НСтр("ru='Завершение сессии'")
	);
	
	игсИнтеграцияГазпромБанкHTTPСервисСервер.ЗавершитьСессию(
		РезультатАвторизации.JWTТокен,
		ОперацияИнтеграции
	);
	
	Логирование(Лог,
		НСтр("ru='Завершение'"),
		Ложь
	);
	
	ЗаписатьЛог(Лог, СобытиеЖР);
		
КонецПроцедуры

// Служебные процедуры и функции

// Загрузка обосновывующих документов на портала банка

Функция ОтметкаДокументВыгружен(ПлатежноеПоручениеСсылка, Лог)

	РезультатВозврата = Новый Структура;
	РезультатВозврата.Вставить("Отказ", Ложь);
	РезультатВозврата.Вставить("Ошибки", Новый Массив);
	
	ДокументОбъект = ПлатежноеПоручениеСсылка.ПолучитьОбъект();
		
	Попытка
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.игсВыгруженыСопроводительныеДокументыНаПорталГазпром = Истина;
		ДокументОбъект.Записать();
		
		Логирование(Лог,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Записан %1'"),
				ДокументОбъект)
		);
	Исключение
		РезультатВозврата.Отказ = Истина;
		РезультатВозврата.Ошибки.Добавить(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Не удалось установить признак выгрузки обоснов. документов на портал Газпром и записать %1
					|	%2'"),
				ДокументОбъект,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
			)
		);
	КонецПопытки;
	
	Возврат РезультатВозврата;
	
КонецФункции	

Функция ДокументыВложенияВСтатусе_1_НаНаРассмотрении(ОтветСервиса, Лог)

	РезультатВозврата = Новый Структура;
	РезультатВозврата.Вставить("Отказ", Ложь);
	РезультатВозврата.Вставить("Ошибки", Новый Массив);
	РезультатВозврата.Вставить("ДокументыКВыгрузке", Новый Соответствие);
	
	Успешно = ОтветСервиса["success"]; 
	
	Если Успешно = Неопределено Или Успешно = 0 Тогда
		РезультатВозврата.Отказ = Истина;
		РезультатВозврата.Ошибки.Добавить(
			НСтр("ru='Неудачный запрос списка платежных документов к сервису портала банка Газрпром'")
		);
		
		Возврат РезультатВозврата;
	КонецЕсли;	
	
	СтатусыДокументовСПортала = Новый Соответствие;
	Для каждого Элемент Из ОтветСервиса["data"] Цикл
		ПлатежныйДокументПортала = ПлатежСПорталаВСтруктуру(Элемент.Значение);
				
		// На рассмотрении
		Если ПлатежныйДокументПортала.Статус <> 1 Тогда
			Продолжить;
		КонецЕсли;	
		
		СтатусыДокументовСПортала.Вставить(ПлатежныйДокументПортала.IDДок, ПлатежныйДокументПортала);
	КонецЦикла;	
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("СчетаОрганизации",
		ПланыВидовХарактеристик.ИГС_ДополнительныеНастройкиТекущейИБ.РасчетныеСчетаИнтеграцииСПорталомГазпромБанка.СписокЗначений.ВыгрузитьКолонку("Значение")
	);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПлатежныеДокументы.Ссылка КАК ПлатежноеПоручение,
	|	ПлатежныеДокументы.Номер КАК Номер,
	|	ПлатежныеДокументы.Дата КАК Дата,
	|	ПлатежныеДокументы.игсИдентификаторБанкаГазпром КАК IDДок,
	|	ВЫБОР
	|		КОГДА ПлатежныеДокументы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ПереводНаДругойСчет)
	|			ТОГДА ПлатежныеДокументы.Организация.ИНН
	|		ИНАЧЕ ПлатежныеДокументы.Контрагент.ИНН
	|	КОНЕЦ КАК КонтрагентИНН,
	|	ПлатежныеДокументы.Организация,
	|	ИГС_ЗРДС.Ссылка КАК Заявка
	|ИЗ
	|	Документ.ПлатежноеПоручениеИсходящее КАК ПлатежныеДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИГС_ЗРДС КАК ИГС_ЗРДС
	|		ПО ПлатежныеДокументы.ДокументОснование = ИГС_ЗРДС.Ссылка
	|ГДЕ
	|	ПлатежныеДокументы.СчетОрганизации В(&СчетаОрганизации)
	|	И ПлатежныеДокументы.игсСтатусБанкаГазпром = ЗНАЧЕНИЕ(Перечисление.игсСтатусыПлатежныхДокументовПорталаГазпромБанк.НаРассмотрении)
	|	И НЕ ПлатежныеДокументы.игсВыгруженыСопроводительныеДокументыНаПорталГазпром
	|	И ПлатежныеДокументы.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	МассивЗявок = Новый Массив;
	ИдентификаторыПоЗявкам = Новый Соответствие;
	ДокументыВложенияКВыгрузке = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
		ДанныеСПортала = СтатусыДокументовСПортала[Выборка.IDДок];
		Если ДанныеСПортала = Неопределено Тогда
			Продолжить;	
		КонецЕсли;	
		
		//ДлинаНомера = СтрДлина(ДанныеСПортала.НомерДок);
		//Номер = Прав(СокрЛП(Выборка.Номер), ДлинаНомера);
		//Если Номер = НомерДок
		//	И НачалоДня(Выборка.Дата) = НачалоДня(ДанныеСПортала.ДатаДок)
		//	И Выборка.КонтрагентИНН = ДанныеСПортала.КонтрагентИНН Тогда
		//КонецЕсли;
		
		Параметры = НовыйПараметрыВыгрузкиДокументов();
		Параметры.ПлатежноеПоручение = Выборка.ПлатежноеПоручение;
		//Параметры.ДанныеПортала = ДанныеСПортала;
		
		ДокументыВложенияКВыгрузке.Вставить(Выборка.IDДок, Параметры);
		
		Массив = ИдентификаторыПоЗявкам[Выборка.Заявка];
		Если Массив = Неопределено Тогда
			Массив = Новый Массив;
			ИдентификаторыПоЗявкам.Вставить(Выборка.Заявка, Массив);
		КонецЕсли;
		Массив.Добавить(Выборка.IDДок);
		
		МассивЗявок.Добавить(Выборка.Заявка);
	КонецЦикла;	
	
	Логирование(Лог,
		НСтр("ru='Чтение вложений по зявкам платежных поручений'")
	);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Заявки", МассивЗявок);
	Запрос.Текст =	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ХранилищеДополнительнойИнформации.Объект КАК ВладелецФайла,
	|	ХранилищеДополнительнойИнформации.Ссылка КАК ДополнительнаяИфнормацияСсылка,
	|	ХранилищеДополнительнойИнформации.ИмяФайла,
	|	ХранилищеДополнительнойИнформации.ПутьКФайлу
	|ИЗ
	|	Справочник.ХранилищеДополнительнойИнформации КАК ХранилищеДополнительнойИнформации
	|ГДЕ
	|	ХранилищеДополнительнойИнформации.Объект В(&Заявки)
	|	И НЕ ХранилищеДополнительнойИнформации.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВладелецФайла";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл		
		//ДопИнформация  = ИГС_ПрисоединенныеФайлы.ПолучитьДанныеФайла(
		ДопИнформация  = Справочники.ПлатежноеПоручениеПрисоединенныеФайлы.ПолучитьДанныеФайла(
			Выборка.ДополнительнаяИфнормацияСсылка,
			Новый УникальныйИдентификатор()
		);
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(ДопИнформация.СсылкаНаДвоичныеДанныеФайла);
		
		ИмяФайлаВложения = ?(Выборка.ИмяФайла = "", Выборка.ПутьКФайлу, Выборка.ИмяФайла);
		ЧастиИмениФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ИмяФайлаВложения);
		ЧастиИмениФайла.Вставить("РасширениеБезТочки",
			//ФайловыеФункцииКлиентСервер.РасширениеБезТочки(ЧастиИмениФайла.Расширение)
			ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(ЧастиИмениФайла.Расширение)
		);
		
		Если ФайлПодлежитКВыгрузке(ЧастиИмениФайла.РасширениеБезТочки) Тогда
			Идентификаторы = ИдентификаторыПоЗявкам[Выборка.ВладелецФайла];
			Для каждого Идентификатор Из Идентификаторы Цикл
				Параметры = ДокументыВложенияКВыгрузке[Идентификатор];
				
				ОписаниеФайла = НовыйОписаниеФайлаВложения();
				ОписаниеФайла.ИмяФайла       = ЧастиИмениФайла.Имя;
				ОписаниеФайла.Расширение     = ЧастиИмениФайла.РасширениеБезТочки;
				ОписаниеФайла.ДвоичныеДанные = ДвоичныеДанные;
				
				Параметры.ФайлыВложения.Добавить(ОписаниеФайла);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;	
	
	РезультатВозврата.Вставить("ДокументыКВыгрузке", ДокументыВложенияКВыгрузке);
	
	Возврат РезультатВозврата; 
	
КонецФункции	

Функция ФайлПодлежитКВыгрузке(РасширениеФайла)
	
	Возврат 
		Не (Найти(
				ЗапрещенныеКВыгрузкеРасширенияФайлов(),
		    	РасширениеФайла
			) > 0
		);	
	
КонецФункции	

Функция ЗапрещенныеКВыгрузкеРасширенияФайлов()
	
	Возврат 
		"doc|dot|docx|docm|dotx|dotm";
	
КонецФункции	

Функция НовыйОписаниеФайлаВложения()

	РезультатВозврата = Новый Структура; 
	
	РезультатВозврата.Вставить("ИмяФайла");
	РезультатВозврата.Вставить("Расширение");
	РезультатВозврата.Вставить("ДвоичныеДанные");
	
	Возврат РезультатВозврата;
	
КонецФункции	

Функция НовыйПараметрыВыгрузкиДокументов()
	
	РезультатВозврата = Новый Структура; 
	
	РезультатВозврата.Вставить("ПлатежноеПоручение", Неопределено);
	РезультатВозврата.Вставить("ДанныеПортала", Неопределено);
	РезультатВозврата.Вставить("ФайлыВложения", Новый Массив);
	
	Возврат РезультатВозврата;
	
КонецФункции	

// Загрузка статусов с портала банка

Функция ОбработатьСтатусыДокументов(ОтветСервиса, Лог)
	
	РезультатВозврата = Новый Структура;
	РезультатВозврата.Вставить("Отказ", Ложь);
	РезультатВозврата.Вставить("Ошибки", Новый Массив);
	
	Успешно = ОтветСервиса["success"]; 
	
	Если Успешно = Неопределено Или Успешно = 0 Тогда
		РезультатВозврата.Отказ = Истина;
		РезультатВозврата.Ошибки.Добавить(
			НСтр("ru='Неудачный запрос списка платежных документов к сервису портала банка Газрпром'")
		);
		
		Возврат РезультатВозврата;
	КонецЕсли;	
	
	ДополнительныеПараметры = Неопределено;
	ДокументыКЗаписи = Новый Соответствие;
	НеУдалосьЗаблокироватьДокументы = Новый Соответствие;
	Для каждого Элемент Из ОтветСервиса["data"] Цикл
		ПлатежныйДокументПортала = ПлатежСПорталаВСтруктуру(Элемент.Значение);
		
		Если НеЗагружатьДанныеПортала(ПлатежныйДокументПортала, ДополнительныеПараметры) Тогда
			Продолжить;
		КонецЕсли;	
		
		ПлатежныйДокумент1С = НайтиДокумент(ПлатежныйДокументПортала);
		Если Не ЗначениеЗаполнено(ПлатежныйДокумент1С) Тогда
			РезультатВозврата.Отказ = Истина;	
			РезультатВозврата.Ошибки.Добавить(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Не удалось найти платежное поручение по реквизитам:
						|	ИНН контрагента: %1
						|	Номер %2
						|	Дата: %3
						|	Идентификатор: %4'"),
					ПлатежныйДокументПортала.КонтрагентИНН,
					ПлатежныйДокументПортала.НомерДок,
					Формат(ПлатежныйДокументПортала.ДатаДок, "ДФ=dd.MM.yyyy"),
					ПлатежныйДокументПортала.IDДок	
				)
			);
			Продолжить;
		КонецЕсли;
		
		// Исключим сценарий, когда не удалось заболокировать документ на предыду́щей итерации,
		// т.к. сервис может вернуть по payment_num несколько row_id
		Если НеУдалосьЗаблокироватьДокументы[ПлатежныйДокумент1С] = Истина Тогда
			Продолжить;
		КонецЕсли;	
		
		ДанныеСПортала = НовыйДанныеСПортала();
		ДанныеСПортала.игсСтатусБанкаГазпром =
			Перечисления.игсСтатусыПлатежныхДокументовПорталаГазпромБанк.СтатусПоКодуПорталаГазпром(ПлатежныйДокументПортала.Статус);
			
		Если НеобходимоОбновитьДанныеДокумента(ПлатежныйДокумент1С, ДокументыКЗаписи, ПлатежныйДокументПортала.IDДок, ДанныеСПортала) Тогда 
			ПлатежныйДокумент1СОбъект = ДокументыКЗаписи[ПлатежныйДокумент1С];
			Если ПлатежныйДокумент1СОбъект = Неопределено Тогда
				ПлатежныйДокумент1СОбъект = ПлатежныйДокумент1С.ПолучитьОбъект();
				
				Попытка 
					ПлатежныйДокумент1СОбъект.Заблокировать();
				Исключение
					РезультатВозврата.Отказ = Истина;
					РезультатВозврата.Ошибки.Добавить(
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='Не удалось заблокировать для обновления реквизитов портала Газпром %1
								|	%2'"),
							ПлатежныйДокумент1СОбъект,
							ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
						)
					);
					
					НеУдалосьЗаблокироватьДокументы.Вставить(ПлатежныйДокумент1С, Истина);
					Продолжить;
				КонецПопытки;	
			КонецЕсли;
			
			ПлатежныйДокумент1СОбъект.игсИдентификаторБанкаГазпром = ПлатежныйДокументПортала.IDДок;
			Для каждого ЭлементКоллекции Из ДанныеСПортала Цикл
				ПлатежныйДокумент1СОбъект[ЭлементКоллекции.Ключ] = ЭлементКоллекции.Значение;
			КонецЦикла;	
				
			ДокументыКЗаписи.Вставить(ПлатежныйДокумент1С, ПлатежныйДокумент1СОбъект);	
		КонецЕсли;	
	КонецЦикла;	
	
	Для каждого ЭлементКоллекции Из ДокументыКЗаписи Цикл
		ДокументОбъект = ЭлементКоллекции.Значение;
		Попытка
			ДокументОбъект.ОбменДанными.Загрузка = Истина;	
			ДокументОбъект.Записать();
			ДокументОбъект.Разблокировать();
			
			Логирование(Лог,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Записан %1'"),
					ДокументОбъект)
			);
		Исключение
			РезультатВозврата.Отказ = Истина;
			РезультатВозврата.Ошибки.Добавить(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Не удалось обновить реквизиты портала Газпром и записать %1
						|	%2'"),
					ДокументОбъект,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
				)
			);
		КонецПопытки;
	КонецЦикла;	
	
	Возврат РезультатВозврата; 
	
КонецФункции

Функция НеЗагружатьДанныеПортала(ДанныеСПортала, ДополнительныеПараметры)
	
	РезультатВозврата = Ложь;
	
	РезультатВозврата = РезультатВозврата
		Или ПрименитьПравилоФильтраПоИННБанка(ДанныеСПортала, ДополнительныеПараметры);
		
	РезультатВозврата = РезультатВозврата
		Или ПрименитьПравилоФильтраПоНазначениюПлатежа(ДанныеСПортала, ДополнительныеПараметры);
		
	Возврат РезультатВозврата;
	
КонецФункции	

Функция ПрименитьПравилоФильтраПоИННБанка(ДанныеСПортала, ДополнительныеПараметры)
	
	ИННБанка = "7744001497|";
	
	Возврат (Найти(ИННБанка, ДанныеСПортала.КонтрагентИНН) > 0);
	
КонецФункции

Функция ПрименитьПравилоФильтраПоНазначениюПлатежа(ДанныеСПортала, ДополнительныеПараметры)
	
	РезультатВозврата = Ложь;
	
	// Взыскание согласно Исполнительный лист
	РезультатВозврата = РезультатВозврата
		Или СтрокаСоответствуетРегулярномуВыражению(
				НРег(ДанныеСПортала.НазначениеПлатежа),
				".*взыскание согласно исп.+лист.*",
				ДополнительныеПараметры
		);
	
	Возврат РезультатВозврата;
	
КонецФункции

Функция НайтиДокумент(ПлатежныйДокументПортала)
	
	РезультатВозврата = Неопределено;
	
	ЕстьВсеРеквизитыПоискаДокумена =
		ЗначениеЗаполнено(ПлатежныйДокументПортала.НомерДок)
		И ЗначениеЗаполнено(ПлатежныйДокументПортала.ДатаДок)
		И ЗначениеЗаполнено(ПлатежныйДокументПортала.IDДок)
		И ЗначениеЗаполнено(ПлатежныйДокументПортала.КонтрагентИНН);
		
	Если Не ЕстьВсеРеквизитыПоискаДокумена Тогда
		Возврат Неопределено;	
	КонецЕсли;		
	
	ЗапросПоискаДокумента = Новый Запрос;
	
	ЗапросПоискаДокумента.УстановитьПараметр("НачалоПериода", НачалоДня(ПлатежныйДокументПортала.ДатаДок));
	ЗапросПоискаДокумента.УстановитьПараметр("КонецПериода",  КонецДня(ПлатежныйДокументПортала.ДатаДок));
	
	ЗапросПоискаДокумента.УстановитьПараметр("СчетаОрганизации",
		ПланыВидовХарактеристик.ИГС_ДополнительныеНастройкиТекущейИБ.РасчетныеСчетаИнтеграцииСПорталомГазпромБанка.СписокЗначений.ВыгрузитьКолонку("Значение")
	);
	
	ЗапросПоискаДокумента.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПлатежныеДокументы.Ссылка,
	|	ПлатежныеДокументы.Номер КАК Номер,
	|	ПлатежныеДокументы.игсИдентификаторБанкаГазпром КАК IDДок,
	|	ВЫБОР
	|		КОГДА ПлатежныеДокументы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ПереводНаДругойСчет)
	|			ТОГДА ПлатежныеДокументы.Организация.ИНН
	|		ИНАЧЕ ПлатежныеДокументы.Контрагент.ИНН
	|	КОНЕЦ КАК КонтрагентИНН,
	|	ПлатежныеДокументы.Организация КАК Организация
	|ИЗ
	|	Документ.ПлатежноеПоручениеИсходящее КАК ПлатежныеДокументы
	|ГДЕ
	|	ПлатежныеДокументы.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ПлатежныеДокументы.СчетОрганизации В(&СчетаОрганизации)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ПлатежныеДокументы.Ссылка,
	|	ПлатежныеДокументы.Номер,
	|	ПлатежныеДокументы.игсИдентификаторБанкаГазпром,
	|	ВЫБОР
	|		КОГДА ПлатежныеДокументы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ПереводНаДругойСчет)
	|			ТОГДА ПлатежныеДокументы.Организация.ИНН
	|		ИНАЧЕ ПлатежныеДокументы.Контрагент.ИНН
	|	КОНЕЦ,
	|	ПлатежныеДокументы.Организация
	|ИЗ
	|	Документ.ПлатежноеПоручениеИсходящее КАК ПлатежныеДокументы
	|ГДЕ
	|	ПлатежныеДокументы.ДатаОплаты МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ПлатежныеДокументы.СчетОрганизации В(&СчетаОрганизации)
	|
	|УПОРЯДОЧИТЬ ПО
	|	IDДок,
	|	КонтрагентИНН";
	
	ТаблицаДокументов = ЗапросПоискаДокумента.Выполнить().Выгрузить();
		
	// Первый прогон - поиск по ID
	ТаблицаДокументов.Индексы.Добавить("IDДок");

	РезультатПоиска = ТаблицаДокументов.НайтиСтроки(Новый Структура("IDДок", ПлатежныйДокументПортала.IDДок));
	
	Если РезультатПоиска.Количество() = 1 Тогда
		Возврат РезультатПоиска[0].Ссылка;
	ИначеЕсли РезультатПоиска.Количество() > 1 Тогда
		Возврат Неопределено;
	КонецЕсли;
	ТаблицаДокументов.Индексы.Очистить();
	
	// Второй прогон - поиск по номеру и ИНН контрагента
	ТаблицаДокументов.Индексы.Добавить("КонтрагентИНН");
	
	РезультатПоиска = ТаблицаДокументов.НайтиСтроки(Новый Структура("КонтрагентИНН", ПлатежныйДокументПортала.КонтрагентИНН));
	
	Если РезультатПоиска.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	ДлинаНомера = СтрДлина(ПлатежныйДокументПортала.НомерДок);
	КоличествоДокументов = 0;
	Для каждого СтрокаТаблицы Из РезультатПоиска Цикл
		Номер = Прав(СокрЛП(СтрокаТаблицы.Номер), ДлинаНомера);
		Если Номер = ПлатежныйДокументПортала.НомерДок Тогда
			Если КоличествоДокументов = 0 Тогда
				РезультатВозврата = СтрокаТаблицы.Ссылка;
			КонецЕсли;
			КоличествоДокументов = КоличествоДокументов + 1;
		КонецЕсли;	
	КонецЦикла;	
	
	Если КоличествоДокументов > 1 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат РезультатВозврата;
		
КонецФункции

Функция НеобходимоОбновитьДанныеДокумента(ПлатежныйДокумент1С, КэшДокументов, IDДок, ДанныеСПортала)
	
	ИменаЗапрашиваемыхРеквизитов = Новый Массив;
	Для каждого ЭлементКоллекции Из ДанныеСПортала Цикл
		ИменаЗапрашиваемыхРеквизитов.Добавить(ЭлементКоллекции.Ключ); 
	КонецЦикла;	
	ИменаЗапрашиваемыхРеквизитов.Добавить("игсИдентификаторБанкаГазпром");
	
	// Достанем из кэша объект по ссылке
	ПлатежныйДокумент1СОбъект = КэшДокументов[ПлатежныйДокумент1С];
	Если ПлатежныйДокумент1СОбъект = Неопределено Тогда 
		РеквизитыПлатежногоДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ПлатежныйДокумент1С,
			ИменаЗапрашиваемыхРеквизитов
		);
	Иначе
		РеквизитыПлатежногоДокумента = Новый Структура(
			СтрСоединить(
				ИменаЗапрашиваемыхРеквизитов,
				","
			)
		);
		ЗаполнитьЗначенияСвойств(РеквизитыПлатежногоДокумента, ПлатежныйДокумент1СОбъект);
	КонецЕсли;
	
	СравнениеЗначений = Новый СравнениеЗначений;
	РезультатСравненияИндентификаторов =
		СравнениеЗначений.Сравнить(
			РеквизитыПлатежногоДокумента.игсИдентификаторБанкаГазпром,
			IDДок
		);
	
	Если Не ЗначениеЗаполнено(РеквизитыПлатежногоДокумента.игсИдентификаторБанкаГазпром)
		Или РезультатСравненияИндентификаторов < 0 Тогда
		Возврат Истина;
	Иначе
		Если РезультатСравненияИндентификаторов = 0 Тогда 
			РеквизитыПлатежногоДокумента.Удалить("игсИдентификаторБанкаГазпром");
			Для каждого ЭлементКоллекции Из ДанныеСПортала Цикл
				Если РеквизитыПлатежногоДокумента[ЭлементКоллекции.Ключ] <> ЭлементКоллекции.Значение Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;	
	КонецЕсли;	
	
	Возврат Ложь;
	
КонецФункции	

Функция НовыйДанныеСПортала()
	
	РезультатВозврата = Новый Структура;
	РезультатВозврата.Вставить("игсСтатусБанкаГазпром", Неопределено);
	
	Возврат РезультатВозврата;
	
КонецФункции

// Сериализация

Функция ПлатежСПорталаВСтруктуру(ДанныеПлатежногоДокументСПортала)

	РезультатВозврата = Новый Структура;
	
	РезультатВозврата.Вставить("НомерДок", СокрЛП(ДанныеПлатежногоДокументСПортала["payment_num"]));
	РезультатВозврата.Вставить("ДатаДок", ПреобразоватьВДату(ДанныеПлатежногоДокументСПортала["date"]));
	РезультатВозврата.Вставить("IDДок", ДанныеПлатежногоДокументСПортала["row_id"]);
	РезультатВозврата.Вставить("КонтрагентИНН", ДанныеПлатежногоДокументСПортала["participants"]["implementer"]["inn"]);
	РезультатВозврата.Вставить("Статус", ДанныеПлатежногоДокументСПортала["status"]);
	РезультатВозврата.Вставить("НазначениеПлатежа", ДанныеПлатежногоДокументСПортала["purp"]);
	
	Возврат РезультатВозврата;
	
КонецФункции	

Функция ПреобразоватьВДату(ДатаСтрокойJSON)
	
	СтрДата = СтрЗаменить(СокрЛП(ДатаСтрокойJSON), " ", "T");
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку("<dateTime>" + СтрДата + "</dateTime>");

	ДатаИзXML = ПрочитатьXML(ЧтениеXML, Тип("Дата"));

	Возврат ДатаИзXML;
	
КонецФункции	

// Логирование

Процедура ЗаписатьЛог(Лог, СобытиеЖР)
	
	СобытиеРодительЖР = СобытиеРодительЖурналаРегистрации();
	
	ЗаписьЖурналаРегистрации(
		СобытиеРодительЖР.Имя + "." + СобытиеЖР.Имя,
		УровеньЖурналаРегистрации.Информация,,,
		Лог.ПолучитьТекст()
	);
	
КонецПроцедуры	

Процедура Логирование(Лог, ЗаписьЛога, CRLF = Истина)
	
	ОтметкВремени = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Время сеанса: %1
			|Универсальное время: %2'"),
		ТекущаяДатаСеанса(),
		ТекущаяУниверсальнаяДата(),
	);
	
	Лог.ДобавитьСтроку(ОтметкВремени);
	Лог.ДобавитьСтроку(ЗаписьЛога);
	Если CRLF Тогда
		Лог.ДобавитьСтроку("");
	КонецЕсли;	
	
КонецПроцедуры	

Функция НовыйЛог()
	
	Возврат Новый ТекстовыйДокумент;
	
КонецФункции	

// Уведомления об ошибках

Процедура УведомитьОбОшибке(ИнформацияОбОшибке, СобытиеЖР)
	
	ТекстОшибки = ИнформацияОбОшибке;
	Если ТипЗнч(ИнформацияОбОшибке) = Тип("Массив") Тогда
		ТекстОшибки = "";
		Для Каждого Ошибка ИЗ ИнформацияОбОшибке Цикл
			ТекстОшибки = ТекстОшибки
				+ ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС)
				+ "* "
				+ Ошибка;
		КонецЦикла;
		ТекстОшибки = Символы.ПС + ТекстОшибки;
	КонецЕсли;	
	
	ВидСобытия = Перечисления.игсСобытияУведомленийПоПочте.ОшибкаИнтеграцииСПорталомБанкаГазпром;
	
	Подписчики =
		РегистрыСведений.игсПодпискиПользователейНаСобытияУведомленийПоПочте.ПолучитьПодписчиковНаСобытие(
			ВидСобытия
		);
		
	ТекстУведомления = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Произошла ошибка при обмене с порталом банка ""Газрпром"". Дата, время: %1
			|Событие: %2
			|Подробная информация об ошибке: %3'"),
		ТекущаяДата(),
		СобытиеЖР.Представление,
		ТекстОшибки
	);
	
	СобытиеРодительЖР = СобытиеРодительЖурналаРегистрации();
	
	ЗаписьЖурналаРегистрации(
		СобытиеРодительЖР.Имя + "." + СобытиеЖР.Имя,
		УровеньЖурналаРегистрации.Ошибка,,,
		ТекстОшибки
	);
	
	ИдентификаторУведомления = Новый УникальныйИдентификатор; 	
	
	Для каждого Подписчик Из Подписчики Цикл
		Если Не ЗначениеЗаполнено(Подписчик) Тогда
			Продолжить;
		КонецЕсли;
		РегистрыСведений.игсОчередьУведомленийПоПочте.ДобавитьУведомление(
			Подписчик,
			ИдентификаторУведомления,
			ВидСобытия,
			ТекстУведомления
		);	
	КонецЦикла;

КонецПроцедуры

// События дл ЖР

Функция СобытиеРодительЖурналаРегистрации()
	Возврат
		Новый Структура(
			"Имя, Представление",
		    "ОбменСПорталомГазпром",
			"Обмен с порталом банка ""Газпром"""
		);
КонецФункции

Функция СобытиеОбновлениеСтатусовЖурналаРегистрации()
	Возврат
		Новый Структура(
			"Имя, Представление",
			"ОбновлениеСтатусов",
			"Обновление статусов"
		);
КонецФункции
	
Функция СобытиеЗагрузкаДокументовЖурналаРегистрации()
	Возврат
		Новый Структура(
			"Имя, Представление",
			"ЗагрузкаДокументов",
			"Загрузка документов"
		);
КонецФункции

// Служебные

Функция СтрокаСоответствуетРегулярномуВыражению(Строка, Фасет, ДополнительныеПараметры)
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;	
	
	Если Не ДополнительныеПараметры.Свойство("ФабрикиXDTO_regexp") Тогда
		ДополнительныеПараметры.Вставить("ФабрикиXDTO_regexp", Новый Соответствие);
	КонецЕсли;
	
	ФабрикаXDTO_regexp = ДополнительныеПараметры.ФабрикиXDTO_regexp[Фасет];
	Если ФабрикаXDTO_regexp = Неопределено Тогда
		Чтение = Новый ЧтениеXML;
	    Чтение.УстановитьСтроку(
	        "<Model xmlns=""http://v8.1c.ru/8.1/xdto"" xmlns:xs=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:type=""Model"">
	        |<package targetNamespace=""sample-my-package"">
	        |<valueType name=""testtypes"" base=""xs:string"">
	        |<pattern>" + Фасет + "</pattern>
	        |</valueType>
	        |<objectType name=""TestObj"">
	        |<property xmlns:d4p1=""sample-my-package"" name=""TestItem"" type=""d4p1:testtypes""/>
	        |</objectType>
	        |</package>
	        |</Model>");

	    Модель = ФабрикаXDTO.ПрочитатьXML(Чтение);
	    ФабрикаXDTO_regexp = Новый ФабрикаXDTO(Модель);
		
		ДополнительныеПараметры.ФабрикиXDTO_regexp.Вставить(Фасет, ФабрикаXDTO_regexp);
	КонецЕсли;	

    Пакет = ФабрикаXDTO_regexp.Пакеты.Получить("sample-my-package");
    Тест = ФабрикаXDTO_regexp.Создать(Пакет.Получить("TestObj"));

    Попытка
        Тест.TestItem = Строка;
        Возврат Истина;
    Исключение
        Возврат Ложь;
    КонецПопытки;
    
КонецФункции


// Инициализация

//игсИнтеграцияГазпромБанкHTTPСервисСерверМодуль = ВнешниеОбработки.Создать(
//	ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ЭтотОбъект.ИспользуемоеИмяФайла).Путь
//		+ "игсИнтеграцияГазпромБанкHTTPСервисСервер_ОбщийМодуль.epf"
//);
